Index: app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/TimeZones.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/TimeZones.java	(revision )
+++ app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/TimeZones.java	(revision )
@@ -0,0 +1,161 @@
+package com.reserv.myapplicationeli.tools.persian.Calendar.persian.util;
+
+import java.util.TimeZone;
+
+/**
+ * This is simply all the available TimeZones from java.util.TimeZone as type
+ * safe enum
+ */
+public enum TimeZones {
+	DEFAULT(TimeZone.getDefault()),
+	// default JDK 1.4.2 time zones
+	ACT(TimeZone.getTimeZone("ACT")), AET(TimeZone.getTimeZone("AET")), AFRICA_ABIDJAN(TimeZone.getTimeZone("Africa/Abidjan")), AFRICA_ACCRA(TimeZone.getTimeZone("Africa/Accra")), AFRICA_ADDIS_ABABA(TimeZone
+			.getTimeZone("Africa/Addis_Ababa")), AFRICA_ALGIERS(TimeZone.getTimeZone("Africa/Algiers")), AFRICA_ASMERA(TimeZone.getTimeZone("Africa/Asmera")), AFRICA_BAMAKO(TimeZone.getTimeZone("Africa/Bamako")), AFRICA_BANGUI(TimeZone
+			.getTimeZone("Africa/Bangui")), AFRICA_BANJUL(TimeZone.getTimeZone("Africa/Banjul")), AFRICA_BISSAU(TimeZone.getTimeZone("Africa/Bissau")), AFRICA_BLANTYRE(TimeZone.getTimeZone("Africa/Blantyre")), AFRICA_BRAZZAVILLE(TimeZone
+			.getTimeZone("Africa/Brazzaville")), AFRICA_BUJUMBURA(TimeZone.getTimeZone("Africa/Bujumbura")), AFRICA_CAIRO(TimeZone.getTimeZone("Africa/Cairo")), AFRICA_CASABLANCA(TimeZone.getTimeZone("Africa/Casablanca")), AFRICA_CEUTA(
+			TimeZone.getTimeZone("Africa/Ceuta")), AFRICA_CONAKRY(TimeZone.getTimeZone("Africa/Conakry")), AFRICA_DAKAR(TimeZone.getTimeZone("Africa/Dakar")), AFRICA_DAR_ES_SALAAM(TimeZone.getTimeZone("Africa/Dar_es_Salaam")), AFRICA_DJIBOUTI(
+			TimeZone.getTimeZone("Africa/Djibouti")), AFRICA_DOUALA(TimeZone.getTimeZone("Africa/Douala")), AFRICA_EL_AAIUN(TimeZone.getTimeZone("Africa/El_Aaiun")), AFRICA_FREETOWN(TimeZone.getTimeZone("Africa/Freetown")), AFRICA_GABORONE(
+			TimeZone.getTimeZone("Africa/Gaborone")), AFRICA_HARARE(TimeZone.getTimeZone("Africa/Harare")), AFRICA_JOHANNESBURG(TimeZone.getTimeZone("Africa/Johannesburg")), AFRICA_KAMPALA(TimeZone.getTimeZone("Africa/Kampala")), AFRICA_KHARTOUM(
+			TimeZone.getTimeZone("Africa/Khartoum")), AFRICA_KIGALI(TimeZone.getTimeZone("Africa/Kigali")), AFRICA_KINSHASA(TimeZone.getTimeZone("Africa/Kinshasa")), AFRICA_LAGOS(TimeZone.getTimeZone("Africa/Lagos")), AFRICA_LIBREVILLE(
+			TimeZone.getTimeZone("Africa/Libreville")), AFRICA_LOME(TimeZone.getTimeZone("Africa/Lome")), AFRICA_LUANDA(TimeZone.getTimeZone("Africa/Luanda")), AFRICA_LUBUMBASHI(TimeZone.getTimeZone("Africa/Lubumbashi")), AFRICA_LUSAKA(
+			TimeZone.getTimeZone("Africa/Lusaka")), AFRICA_MALABO(TimeZone.getTimeZone("Africa/Malabo")), AFRICA_MAPUTO(TimeZone.getTimeZone("Africa/Maputo")), AFRICA_MASERU(TimeZone.getTimeZone("Africa/Maseru")), AFRICA_MBABANE(TimeZone
+			.getTimeZone("Africa/Mbabane")), AFRICA_MOGADISHU(TimeZone.getTimeZone("Africa/Mogadishu")), AFRICA_MONROVIA(TimeZone.getTimeZone("Africa/Monrovia")), AFRICA_NAIROBI(TimeZone.getTimeZone("Africa/Nairobi")), AFRICA_NDJAMENA(
+			TimeZone.getTimeZone("Africa/Ndjamena")), AFRICA_NIAMEY(TimeZone.getTimeZone("Africa/Niamey")), AFRICA_NOUAKCHOTT(TimeZone.getTimeZone("Africa/Nouakchott")), AFRICA_OUAGADOUGOU(TimeZone.getTimeZone("Africa/Ouagadougou")), AFRICA_PORTO_NOVO(
+			TimeZone.getTimeZone("Africa/Porto-Novo")), AFRICA_SAO_TOME(TimeZone.getTimeZone("Africa/Sao_Tome")), AFRICA_TIMBUKTU(TimeZone.getTimeZone("Africa/Timbuktu")), AFRICA_TRIPOLI(TimeZone.getTimeZone("Africa/Tripoli")), AFRICA_TUNIS(
+			TimeZone.getTimeZone("Africa/Tunis")), AFRICA_WINDHOEK(TimeZone.getTimeZone("Africa/Windhoek")), AGT(TimeZone.getTimeZone("AGT")), AMERICA_ADAK(TimeZone.getTimeZone("America/Adak")), AMERICA_ANCHORAGE(TimeZone
+			.getTimeZone("America/Anchorage")), AMERICA_ANGUILLA(TimeZone.getTimeZone("America/Anguilla")), AMERICA_ANTIGUA(TimeZone.getTimeZone("America/Antigua")), AMERICA_ARAGUAINA(TimeZone.getTimeZone("America/Araguaina")), AMERICA_ARUBA(
+			TimeZone.getTimeZone("America/Aruba")), AMERICA_ASUNCION(TimeZone.getTimeZone("America/Asuncion")), AMERICA_ATKA(TimeZone.getTimeZone("America/Atka")), AMERICA_BARBADOS(TimeZone.getTimeZone("America/Barbados")), AMERICA_BELEM(
+			TimeZone.getTimeZone("America/Belem")), AMERICA_BELIZE(TimeZone.getTimeZone("America/Belize")), AMERICA_BOA_VISTA(TimeZone.getTimeZone("America/Boa_Vista")), AMERICA_BOGOTA(TimeZone.getTimeZone("America/Bogota")), AMERICA_BOISE(
+			TimeZone.getTimeZone("America/Boise")), AMERICA_BUENOS_AIRES(TimeZone.getTimeZone("America/Buenos_Aires")), AMERICA_CAMBRIDGE_BAY(TimeZone.getTimeZone("America/Cambridge_Bay")), AMERICA_CANCUN(TimeZone
+			.getTimeZone("America/Cancun")), AMERICA_CARACAS(TimeZone.getTimeZone("America/Caracas")), AMERICA_CATAMARCA(TimeZone.getTimeZone("America/Catamarca")), AMERICA_CAYENNE(TimeZone.getTimeZone("America/Cayenne")), AMERICA_CAYMAN(
+			TimeZone.getTimeZone("America/Cayman")), AMERICA_CHICAGO(TimeZone.getTimeZone("America/Chicago")), AMERICA_CHIHUAHUA(TimeZone.getTimeZone("America/Chihuahua")), AMERICA_CORDOBA(TimeZone.getTimeZone("America/Cordoba")), AMERICA_COSTA_RICA(
+			TimeZone.getTimeZone("America/Costa_Rica")), AMERICA_CUIABA(TimeZone.getTimeZone("America/Cuiaba")), AMERICA_CURACAO(TimeZone.getTimeZone("America/Curacao")), AMERICA_DANMARKSHAVN(TimeZone.getTimeZone("America/Danmarkshavn")), AMERICA_DAWSON(
+			TimeZone.getTimeZone("America/Dawson")), AMERICA_DAWSON_CREEK(TimeZone.getTimeZone("America/Dawson_Creek")), AMERICA_DENVER(TimeZone.getTimeZone("America/Denver")), AMERICA_DETROIT(TimeZone.getTimeZone("America/Detroit")), AMERICA_DOMINICA(
+			TimeZone.getTimeZone("America/Dominica")), AMERICA_EDMONTON(TimeZone.getTimeZone("America/Edmonton")), AMERICA_EIRUNEPE(TimeZone.getTimeZone("America/Eirunepe")), AMERICA_EL_SALVADOR(TimeZone.getTimeZone("America/El_Salvador")), AMERICA_ENSENADA(
+			TimeZone.getTimeZone("America/Ensenada")), AMERICA_FORT_WAYNE(TimeZone.getTimeZone("America/Fort_Wayne")), AMERICA_FORTALEZA(TimeZone.getTimeZone("America/Fortaleza")), AMERICA_GLACE_BAY(TimeZone
+			.getTimeZone("America/Glace_Bay")), AMERICA_GODTHAB(TimeZone.getTimeZone("America/Godthab")), AMERICA_GOOSE_BAY(TimeZone.getTimeZone("America/Goose_Bay")), AMERICA_GRAND_TURK(TimeZone.getTimeZone("America/Grand_Turk")), AMERICA_GRENADA(
+			TimeZone.getTimeZone("America/Grenada")), AMERICA_GUADELOUPE(TimeZone.getTimeZone("America/Guadeloupe")), AMERICA_GUATEMALA(TimeZone.getTimeZone("America/Guatemala")), AMERICA_GUAYAQUIL(TimeZone.getTimeZone("America/Guayaquil")), AMERICA_GUYANA(
+			TimeZone.getTimeZone("America/Guyana")), AMERICA_HALIFAX(TimeZone.getTimeZone("America/Halifax")), AMERICA_HAVANA(TimeZone.getTimeZone("America/Havana")), AMERICA_HERMOSILLO(TimeZone.getTimeZone("America/Hermosillo")), AMERICA_INDIANA_INDIANAPOLIS(
+			TimeZone.getTimeZone("America/Indiana/Indianapolis")), AMERICA_INDIANA_KNOX(TimeZone.getTimeZone("America/Indiana/Knox")), AMERICA_INDIANA_MARENGO(TimeZone.getTimeZone("America/Indiana/Marengo")), AMERICA_INDIANA_VEVAY(TimeZone
+			.getTimeZone("America/Indiana/Vevay")), AMERICA_INDIANAPOLIS(TimeZone.getTimeZone("America/Indianapolis")), AMERICA_INUVIK(TimeZone.getTimeZone("America/Inuvik")), AMERICA_IQALUIT(TimeZone.getTimeZone("America/Iqaluit")), AMERICA_JAMAICA(
+			TimeZone.getTimeZone("America/Jamaica")), AMERICA_JUJUY(TimeZone.getTimeZone("America/Jujuy")), AMERICA_JUNEAU(TimeZone.getTimeZone("America/Juneau")), AMERICA_KENTUCKY_LOUISVILLE(TimeZone
+			.getTimeZone("America/Kentucky/Louisville")), AMERICA_KENTUCKY_MONTICELLO(TimeZone.getTimeZone("America/Kentucky/Monticello")), AMERICA_KNOX_IN(TimeZone.getTimeZone("America/Knox_IN")), AMERICA_LA_PAZ(TimeZone
+			.getTimeZone("America/La_Paz")), AMERICA_LIMA(TimeZone.getTimeZone("America/Lima")), AMERICA_LOS_ANGELES(TimeZone.getTimeZone("America/Los_Angeles")), AMERICA_LOUISVILLE(TimeZone.getTimeZone("America/Louisville")), AMERICA_MACEIO(
+			TimeZone.getTimeZone("America/Maceio")), AMERICA_MANAGUA(TimeZone.getTimeZone("America/Managua")), AMERICA_MANAUS(TimeZone.getTimeZone("America/Manaus")), AMERICA_MARTINIQUE(TimeZone.getTimeZone("America/Martinique")), AMERICA_MAZATLAN(
+			TimeZone.getTimeZone("America/Mazatlan")), AMERICA_MENDOZA(TimeZone.getTimeZone("America/Mendoza")), AMERICA_MENOMINEE(TimeZone.getTimeZone("America/Menominee")), AMERICA_MERIDA(TimeZone.getTimeZone("America/Merida")), AMERICA_MEXICO_CITY(
+			TimeZone.getTimeZone("America/Mexico_City")), AMERICA_MIQUELON(TimeZone.getTimeZone("America/Miquelon")), AMERICA_MONTERREY(TimeZone.getTimeZone("America/Monterrey")), AMERICA_MONTEVIDEO(TimeZone
+			.getTimeZone("America/Montevideo")), AMERICA_MONTREAL(TimeZone.getTimeZone("America/Montreal")), AMERICA_MONTSERRAT(TimeZone.getTimeZone("America/Montserrat")), AMERICA_NASSAU(TimeZone.getTimeZone("America/Nassau")), AMERICA_NEW_YORK(
+			TimeZone.getTimeZone("America/New_York")), AMERICA_NIPIGON(TimeZone.getTimeZone("America/Nipigon")), AMERICA_NOME(TimeZone.getTimeZone("America/Nome")), AMERICA_NORONHA(TimeZone.getTimeZone("America/Noronha")), AMERICA_NORTH_DAKOTA_CENTER(
+			TimeZone.getTimeZone("America/North_Dakota/Center")), AMERICA_PANAMA(TimeZone.getTimeZone("America/Panama")), AMERICA_PANGNIRTUNG(TimeZone.getTimeZone("America/Pangnirtung")), AMERICA_PARAMARIBO(TimeZone
+			.getTimeZone("America/Paramaribo")), AMERICA_PHOENIX(TimeZone.getTimeZone("America/Phoenix")), AMERICA_PORT_AU_PRINCE(TimeZone.getTimeZone("America/Port-au-Prince")), AMERICA_PORT_OF_SPAIN(TimeZone
+			.getTimeZone("America/Port_of_Spain")), AMERICA_PORTO_ACRE(TimeZone.getTimeZone("America/Porto_Acre")), AMERICA_PORTO_VELHO(TimeZone.getTimeZone("America/Porto_Velho")), AMERICA_PUERTO_RICO(TimeZone
+			.getTimeZone("America/Puerto_Rico")), AMERICA_RAINY_RIVER(TimeZone.getTimeZone("America/Rainy_River")), AMERICA_RANKIN_INLET(TimeZone.getTimeZone("America/Rankin_Inlet")), AMERICA_RECIFE(TimeZone.getTimeZone("America/Recife")), AMERICA_REGINA(
+			TimeZone.getTimeZone("America/Regina")), AMERICA_RIO_BRANCO(TimeZone.getTimeZone("America/Rio_Branco")), AMERICA_ROSARIO(TimeZone.getTimeZone("America/Rosario")), AMERICA_SANTIAGO(TimeZone.getTimeZone("America/Santiago")), AMERICA_SANTO_DOMINGO(
+			TimeZone.getTimeZone("America/Santo_Domingo")), AMERICA_SAO_PAULO(TimeZone.getTimeZone("America/Sao_Paulo")), AMERICA_SCORESBYSUND(TimeZone.getTimeZone("America/Scoresbysund")), AMERICA_SHIPROCK(TimeZone
+			.getTimeZone("America/Shiprock")), AMERICA_ST_JOHNS(TimeZone.getTimeZone("America/St_Johns")), AMERICA_ST_KITTS(TimeZone.getTimeZone("America/St_Kitts")), AMERICA_ST_LUCIA(TimeZone.getTimeZone("America/St_Lucia")), AMERICA_ST_THOMAS(
+			TimeZone.getTimeZone("America/St_Thomas")), AMERICA_ST_VINCENT(TimeZone.getTimeZone("America/St_Vincent")), AMERICA_SWIFT_CURRENT(TimeZone.getTimeZone("America/Swift_Current")), AMERICA_TEGUCIGALPA(TimeZone
+			.getTimeZone("America/Tegucigalpa")), AMERICA_THULE(TimeZone.getTimeZone("America/Thule")), AMERICA_THUNDER_BAY(TimeZone.getTimeZone("America/Thunder_Bay")), AMERICA_TIJUANA(TimeZone.getTimeZone("America/Tijuana")), AMERICA_TORTOLA(
+			TimeZone.getTimeZone("America/Tortola")), AMERICA_VANCOUVER(TimeZone.getTimeZone("America/Vancouver")), AMERICA_VIRGIN(TimeZone.getTimeZone("America/Virgin")), AMERICA_WHITEHORSE(TimeZone.getTimeZone("America/Whitehorse")), AMERICA_WINNIPEG(
+			TimeZone.getTimeZone("America/Winnipeg")), AMERICA_YAKUTAT(TimeZone.getTimeZone("America/Yakutat")), AMERICA_YELLOWKNIFE(TimeZone.getTimeZone("America/Yellowknife")), ANTARCTICA_CASEY(TimeZone.getTimeZone("Antarctica/Casey")), ANTARCTICA_DAVIS(
+			TimeZone.getTimeZone("Antarctica/Davis")), ANTARCTICA_DUMONTDURVILLE(TimeZone.getTimeZone("Antarctica/DumontDUrville")), ANTARCTICA_MAWSON(TimeZone.getTimeZone("Antarctica/Mawson")), ANTARCTICA_MCMURDO(TimeZone
+			.getTimeZone("Antarctica/McMurdo")), ANTARCTICA_PALMER(TimeZone.getTimeZone("Antarctica/Palmer")), ANTARCTICA_ROTHERA(TimeZone.getTimeZone("Antarctica/Rothera")), ANTARCTICA_SOUTH_POLE(TimeZone
+			.getTimeZone("Antarctica/South_Pole")), ANTARCTICA_SYOWA(TimeZone.getTimeZone("Antarctica/Syowa")), ANTARCTICA_VOSTOK(TimeZone.getTimeZone("Antarctica/Vostok")), ARCTIC_LONGYEARBYEN(TimeZone.getTimeZone("Arctic/Longyearbyen")), ART(
+			TimeZone.getTimeZone("ART")), ASIA_ADEN(TimeZone.getTimeZone("Asia/Aden")), ASIA_ALMATY(TimeZone.getTimeZone("Asia/Almaty")), ASIA_AMMAN(TimeZone.getTimeZone("Asia/Amman")), ASIA_ANADYR(TimeZone.getTimeZone("Asia/Anadyr")), ASIA_AQTAU(
+			TimeZone.getTimeZone("Asia/Aqtau")), ASIA_AQTOBE(TimeZone.getTimeZone("Asia/Aqtobe")), ASIA_ASHGABAT(TimeZone.getTimeZone("Asia/Ashgabat")), ASIA_ASHKHABAD(TimeZone.getTimeZone("Asia/Ashkhabad")), ASIA_BAGHDAD(TimeZone
+			.getTimeZone("Asia/Baghdad")), ASIA_BAHRAIN(TimeZone.getTimeZone("Asia/Bahrain")), ASIA_BAKU(TimeZone.getTimeZone("Asia/Baku")), ASIA_BANGKOK(TimeZone.getTimeZone("Asia/Bangkok")), ASIA_BEIRUT(TimeZone
+			.getTimeZone("Asia/Beirut")), ASIA_BISHKEK(TimeZone.getTimeZone("Asia/Bishkek")), ASIA_BRUNEI(TimeZone.getTimeZone("Asia/Brunei")), ASIA_CALCUTTA(TimeZone.getTimeZone("Asia/Calcutta")), ASIA_CHOIBALSAN(TimeZone
+			.getTimeZone("Asia/Choibalsan")), ASIA_CHONGQING(TimeZone.getTimeZone("Asia/Chongqing")), ASIA_CHUNGKING(TimeZone.getTimeZone("Asia/Chungking")), ASIA_COLOMBO(TimeZone.getTimeZone("Asia/Colombo")), ASIA_DACCA(TimeZone
+			.getTimeZone("Asia/Dacca")), ASIA_DAMASCUS(TimeZone.getTimeZone("Asia/Damascus")), ASIA_DHAKA(TimeZone.getTimeZone("Asia/Dhaka")), ASIA_DILI(TimeZone.getTimeZone("Asia/Dili")), ASIA_DUBAI(TimeZone.getTimeZone("Asia/Dubai")), ASIA_DUSHANBE(
+			TimeZone.getTimeZone("Asia/Dushanbe")), ASIA_GAZA(TimeZone.getTimeZone("Asia/Gaza")), ASIA_HARBIN(TimeZone.getTimeZone("Asia/Harbin")), ASIA_HONG_KONG(TimeZone.getTimeZone("Asia/Hong_Kong")), ASIA_HOVD(TimeZone
+			.getTimeZone("Asia/Hovd")), ASIA_IRKUTSK(TimeZone.getTimeZone("Asia/Irkutsk")), ASIA_ISTANBUL(TimeZone.getTimeZone("Asia/Istanbul")), ASIA_JAKARTA(TimeZone.getTimeZone("Asia/Jakarta")), ASIA_JAYAPURA(TimeZone
+			.getTimeZone("Asia/Jayapura")), ASIA_JERUSALEM(TimeZone.getTimeZone("Asia/Jerusalem")), ASIA_KABUL(TimeZone.getTimeZone("Asia/Kabul")), ASIA_KAMCHATKA(TimeZone.getTimeZone("Asia/Kamchatka")), ASIA_KARACHI(TimeZone
+			.getTimeZone("Asia/Karachi")), ASIA_KASHGAR(TimeZone.getTimeZone("Asia/Kashgar")), ASIA_KATMANDU(TimeZone.getTimeZone("Asia/Katmandu")), ASIA_KRASNOYARSK(TimeZone.getTimeZone("Asia/Krasnoyarsk")), ASIA_KUALA_LUMPUR(TimeZone
+			.getTimeZone("Asia/Kuala_Lumpur")), ASIA_KUCHING(TimeZone.getTimeZone("Asia/Kuching")), ASIA_KUWAIT(TimeZone.getTimeZone("Asia/Kuwait")), ASIA_MACAO(TimeZone.getTimeZone("Asia/Macao")), ASIA_MACAU(TimeZone
+			.getTimeZone("Asia/Macau")), ASIA_MAGADAN(TimeZone.getTimeZone("Asia/Magadan")), ASIA_MAKASSAR(TimeZone.getTimeZone("Asia/Makassar")), ASIA_MANILA(TimeZone.getTimeZone("Asia/Manila")), ASIA_MUSCAT(TimeZone
+			.getTimeZone("Asia/Muscat")), ASIA_NICOSIA(TimeZone.getTimeZone("Asia/Nicosia")), ASIA_NOVOSIBIRSK(TimeZone.getTimeZone("Asia/Novosibirsk")), ASIA_OMSK(TimeZone.getTimeZone("Asia/Omsk")), ASIA_ORAL(TimeZone
+			.getTimeZone("Asia/Oral")), ASIA_PHNOM_PENH(TimeZone.getTimeZone("Asia/Phnom_Penh")), ASIA_PONTIANAK(TimeZone.getTimeZone("Asia/Pontianak")), ASIA_PYONGYANG(TimeZone.getTimeZone("Asia/Pyongyang")), ASIA_QATAR(TimeZone
+			.getTimeZone("Asia/Qatar")), ASIA_QYZYLORDA(TimeZone.getTimeZone("Asia/Qyzylorda")), ASIA_RANGOON(TimeZone.getTimeZone("Asia/Rangoon")), ASIA_RIYADH(TimeZone.getTimeZone("Asia/Riyadh")), ASIA_RIYADH87(TimeZone
+			.getTimeZone("Asia/Riyadh87")), ASIA_RIYADH88(TimeZone.getTimeZone("Asia/Riyadh88")), ASIA_RIYADH89(TimeZone.getTimeZone("Asia/Riyadh89")), ASIA_SAIGON(TimeZone.getTimeZone("Asia/Saigon")), ASIA_SAKHALIN(TimeZone
+			.getTimeZone("Asia/Sakhalin")), ASIA_SAMARKAND(TimeZone.getTimeZone("Asia/Samarkand")), ASIA_SEOUL(TimeZone.getTimeZone("Asia/Seoul")), ASIA_SHANGHAI(TimeZone.getTimeZone("Asia/Shanghai")), ASIA_SINGAPORE(TimeZone
+			.getTimeZone("Asia/Singapore")), ASIA_TAIPEI(TimeZone.getTimeZone("Asia/Taipei")), ASIA_TASHKENT(TimeZone.getTimeZone("Asia/Tashkent")), ASIA_TBILISI(TimeZone.getTimeZone("Asia/Tbilisi")), ASIA_TEHRAN(TimeZone
+			.getTimeZone("Asia/Tehran")), ASIA_TEL_AVIV(TimeZone.getTimeZone("Asia/Tel_Aviv")), ASIA_THIMBU(TimeZone.getTimeZone("Asia/Thimbu")), ASIA_THIMPHU(TimeZone.getTimeZone("Asia/Thimphu")), ASIA_TOKYO(TimeZone
+			.getTimeZone("Asia/Tokyo")), ASIA_UJUNG_PANDANG(TimeZone.getTimeZone("Asia/Ujung_Pandang")), ASIA_ULAANBAATAR(TimeZone.getTimeZone("Asia/Ulaanbaatar")), ASIA_ULAN_BATOR(TimeZone.getTimeZone("Asia/Ulan_Bator")), ASIA_URUMQI(
+			TimeZone.getTimeZone("Asia/Urumqi")), ASIA_VIENTIANE(TimeZone.getTimeZone("Asia/Vientiane")), ASIA_VLADIVOSTOK(TimeZone.getTimeZone("Asia/Vladivostok")), ASIA_YAKUTSK(TimeZone.getTimeZone("Asia/Yakutsk")), ASIA_YEKATERINBURG(
+			TimeZone.getTimeZone("Asia/Yekaterinburg")), ASIA_YEREVAN(TimeZone.getTimeZone("Asia/Yerevan")), AST(TimeZone.getTimeZone("AST")), ATLANTIC_AZORES(TimeZone.getTimeZone("Atlantic/Azores")), ATLANTIC_BERMUDA(TimeZone
+			.getTimeZone("Atlantic/Bermuda")), ATLANTIC_CANARY(TimeZone.getTimeZone("Atlantic/Canary")), ATLANTIC_CAPE_VERDE(TimeZone.getTimeZone("Atlantic/Cape_Verde")), ATLANTIC_FAEROE(TimeZone.getTimeZone("Atlantic/Faeroe")), ATLANTIC_JAN_MAYEN(
+			TimeZone.getTimeZone("Atlantic/Jan_Mayen")), ATLANTIC_MADEIRA(TimeZone.getTimeZone("Atlantic/Madeira")), ATLANTIC_REYKJAVIK(TimeZone.getTimeZone("Atlantic/Reykjavik")), ATLANTIC_SOUTH_GEORGIA(TimeZone
+			.getTimeZone("Atlantic/South_Georgia")), ATLANTIC_ST_HELENA(TimeZone.getTimeZone("Atlantic/St_Helena")), ATLANTIC_STANLEY(TimeZone.getTimeZone("Atlantic/Stanley")), AUSTRALIA_ACT(TimeZone.getTimeZone("Australia/ACT")), AUSTRALIA_ADELAIDE(
+			TimeZone.getTimeZone("Australia/Adelaide")), AUSTRALIA_BRISBANE(TimeZone.getTimeZone("Australia/Brisbane")), AUSTRALIA_BROKEN_HILL(TimeZone.getTimeZone("Australia/Broken_Hill")), AUSTRALIA_CANBERRA(TimeZone
+			.getTimeZone("Australia/Canberra")), AUSTRALIA_DARWIN(TimeZone.getTimeZone("Australia/Darwin")), AUSTRALIA_HOBART(TimeZone.getTimeZone("Australia/Hobart")), AUSTRALIA_LHI(TimeZone.getTimeZone("Australia/LHI")), AUSTRALIA_LINDEMAN(
+			TimeZone.getTimeZone("Australia/Lindeman")), AUSTRALIA_LORD_HOWE(TimeZone.getTimeZone("Australia/Lord_Howe")), AUSTRALIA_MELBOURNE(TimeZone.getTimeZone("Australia/Melbourne")), AUSTRALIA_NORTH(TimeZone
+			.getTimeZone("Australia/North")), AUSTRALIA_NSW(TimeZone.getTimeZone("Australia/NSW")), AUSTRALIA_PERTH(TimeZone.getTimeZone("Australia/Perth")), AUSTRALIA_QUEENSLAND(TimeZone.getTimeZone("Australia/Queensland")), AUSTRALIA_SOUTH(
+			TimeZone.getTimeZone("Australia/South")), AUSTRALIA_SYDNEY(TimeZone.getTimeZone("Australia/Sydney")), AUSTRALIA_TASMANIA(TimeZone.getTimeZone("Australia/Tasmania")), AUSTRALIA_VICTORIA(TimeZone.getTimeZone("Australia/Victoria")), AUSTRALIA_WEST(
+			TimeZone.getTimeZone("Australia/West")), AUSTRALIA_YANCOWINNA(TimeZone.getTimeZone("Australia/Yancowinna")), BET(TimeZone.getTimeZone("BET")), BRAZIL_ACRE(TimeZone.getTimeZone("Brazil/Acre")), BRAZIL_DENORONHA(TimeZone
+			.getTimeZone("Brazil/DeNoronha")), BRAZIL_EAST(TimeZone.getTimeZone("Brazil/East")), BRAZIL_WEST(TimeZone.getTimeZone("Brazil/West")), BST(TimeZone.getTimeZone("BST")), CANADA_ATLANTIC(TimeZone.getTimeZone("Canada/Atlantic")), CANADA_CENTRAL(
+			TimeZone.getTimeZone("Canada/Central")), CANADA_EAST_SASKATCHEWAN(TimeZone.getTimeZone("Canada/East-Saskatchewan")), CANADA_EASTERN(TimeZone.getTimeZone("Canada/Eastern")), CANADA_MOUNTAIN(TimeZone
+			.getTimeZone("Canada/Mountain")), CANADA_NEWFOUNDLAND(TimeZone.getTimeZone("Canada/Newfoundland")), CANADA_PACIFIC(TimeZone.getTimeZone("Canada/Pacific")), CANADA_SASKATCHEWAN(TimeZone.getTimeZone("Canada/Saskatchewan")), CANADA_YUKON(
+			TimeZone.getTimeZone("Canada/Yukon")), CAT(TimeZone.getTimeZone("CAT")), CET(TimeZone.getTimeZone("CET")), CHILE_CONTINENTAL(TimeZone.getTimeZone("Chile/Continental")), CHILE_EASTERISLAND(TimeZone
+			.getTimeZone("Chile/EasterIsland")), CNT(TimeZone.getTimeZone("CNT")), CST(TimeZone.getTimeZone("CST")), CST6CDT(TimeZone.getTimeZone("CST6CDT")), CTT(TimeZone.getTimeZone("CTT")), CUBA(TimeZone.getTimeZone("Cuba")), EAT(
+			TimeZone.getTimeZone("EAT")), ECT(TimeZone.getTimeZone("ECT")), EET(TimeZone.getTimeZone("EET")), EGYPT(TimeZone.getTimeZone("Egypt")), EIRE(TimeZone.getTimeZone("Eire")), EST(TimeZone.getTimeZone("EST")), EST5EDT(TimeZone
+			.getTimeZone("EST5EDT")), ETC_GMT(TimeZone.getTimeZone("Etc/GMT")), ETC_GMT_PLUS_0(TimeZone.getTimeZone("Etc/GMT+0")), ETC_GMT_PLUS_1(TimeZone.getTimeZone("Etc/GMT+1")), ETC_GMT_PLUS_10(TimeZone.getTimeZone("Etc/GMT+10")), ETC_GMT_PLUS_11(
+			TimeZone.getTimeZone("Etc/GMT+11")), ETC_GMT_PLUS_12(TimeZone.getTimeZone("Etc/GMT+12")), ETC_GMT_PLUS_2(TimeZone.getTimeZone("Etc/GMT+2")), ETC_GMT_PLUS_3(TimeZone.getTimeZone("Etc/GMT+3")), ETC_GMT_PLUS_4(TimeZone
+			.getTimeZone("Etc/GMT+4")), ETC_GMT_PLUS_5(TimeZone.getTimeZone("Etc/GMT+5")), ETC_GMT_PLUS_6(TimeZone.getTimeZone("Etc/GMT+6")), ETC_GMT_PLUS_7(TimeZone.getTimeZone("Etc/GMT+7")), ETC_GMT_PLUS_8(TimeZone
+			.getTimeZone("Etc/GMT+8")), ETC_GMT_PLUS_9(TimeZone.getTimeZone("Etc/GMT+9")), ETC_GMT_MINUS_0(TimeZone.getTimeZone("Etc/GMT-0")), ETC_GMT_MINUS_1(TimeZone.getTimeZone("Etc/GMT-1")), ETC_GMT_MINUS_10(TimeZone
+			.getTimeZone("Etc/GMT-10")), ETC_GMT_MINUS_11(TimeZone.getTimeZone("Etc/GMT-11")), ETC_GMT_MINUS_12(TimeZone.getTimeZone("Etc/GMT-12")), ETC_GMT_MINUS_13(TimeZone.getTimeZone("Etc/GMT-13")), ETC_GMT_MINUS_14(TimeZone
+			.getTimeZone("Etc/GMT-14")), ETC_GMT_MINUS_2(TimeZone.getTimeZone("Etc/GMT-2")), ETC_GMT_MINUS_3(TimeZone.getTimeZone("Etc/GMT-3")), ETC_GMT_MINUS_4(TimeZone.getTimeZone("Etc/GMT-4")), ETC_GMT_MINUS_5(TimeZone
+			.getTimeZone("Etc/GMT-5")), ETC_GMT_MINUS_6(TimeZone.getTimeZone("Etc/GMT-6")), ETC_GMT_MINUS_7(TimeZone.getTimeZone("Etc/GMT-7")), ETC_GMT_MINUS_8(TimeZone.getTimeZone("Etc/GMT-8")), ETC_GMT_MINUS_9(TimeZone
+			.getTimeZone("Etc/GMT-9")), ETC_GMT0(TimeZone.getTimeZone("Etc/GMT0")), ETC_GREENWICH(TimeZone.getTimeZone("Etc/Greenwich")), ETC_UCT(TimeZone.getTimeZone("Etc/UCT")), ETC_UNIVERSAL(TimeZone.getTimeZone("Etc/Universal")), ETC_UTC(
+			TimeZone.getTimeZone("Etc/UTC")), ETC_ZULU(TimeZone.getTimeZone("Etc/Zulu")), EUROPE_AMSTERDAM(TimeZone.getTimeZone("Europe/Amsterdam")), EUROPE_ANDORRA(TimeZone.getTimeZone("Europe/Andorra")), EUROPE_ATHENS(TimeZone
+			.getTimeZone("Europe/Athens")), EUROPE_BELFAST(TimeZone.getTimeZone("Europe/Belfast")), EUROPE_BELGRADE(TimeZone.getTimeZone("Europe/Belgrade")), EUROPE_BERLIN(TimeZone.getTimeZone("Europe/Berlin")), EUROPE_BRATISLAVA(TimeZone
+			.getTimeZone("Europe/Bratislava")), EUROPE_BRUSSELS(TimeZone.getTimeZone("Europe/Brussels")), EUROPE_BUCHAREST(TimeZone.getTimeZone("Europe/Bucharest")), EUROPE_BUDAPEST(TimeZone.getTimeZone("Europe/Budapest")), EUROPE_CHISINAU(
+			TimeZone.getTimeZone("Europe/Chisinau")), EUROPE_COPENHAGEN(TimeZone.getTimeZone("Europe/Copenhagen")), EUROPE_DUBLIN(TimeZone.getTimeZone("Europe/Dublin")), EUROPE_GIBRALTAR(TimeZone.getTimeZone("Europe/Gibraltar")), EUROPE_HELSINKI(
+			TimeZone.getTimeZone("Europe/Helsinki")), EUROPE_ISTANBUL(TimeZone.getTimeZone("Europe/Istanbul")), EUROPE_KALININGRAD(TimeZone.getTimeZone("Europe/Kaliningrad")), EUROPE_KIEV(TimeZone.getTimeZone("Europe/Kiev")), EUROPE_LISBON(
+			TimeZone.getTimeZone("Europe/Lisbon")), EUROPE_LJUBLJANA(TimeZone.getTimeZone("Europe/Ljubljana")), EUROPE_LONDON(TimeZone.getTimeZone("Europe/London")), EUROPE_LUXEMBOURG(TimeZone.getTimeZone("Europe/Luxembourg")), EUROPE_MADRID(
+			TimeZone.getTimeZone("Europe/Madrid")), EUROPE_MALTA(TimeZone.getTimeZone("Europe/Malta")), EUROPE_MINSK(TimeZone.getTimeZone("Europe/Minsk")), EUROPE_MONACO(TimeZone.getTimeZone("Europe/Monaco")), EUROPE_MOSCOW(TimeZone
+			.getTimeZone("Europe/Moscow")), EUROPE_NICOSIA(TimeZone.getTimeZone("Europe/Nicosia")), EUROPE_OSLO(TimeZone.getTimeZone("Europe/Oslo")), EUROPE_PARIS(TimeZone.getTimeZone("Europe/Paris")), EUROPE_PRAGUE(TimeZone
+			.getTimeZone("Europe/Prague")), EUROPE_RIGA(TimeZone.getTimeZone("Europe/Riga")), EUROPE_ROME(TimeZone.getTimeZone("Europe/Rome")), EUROPE_SAMARA(TimeZone.getTimeZone("Europe/Samara")), EUROPE_SAN_MARINO(TimeZone
+			.getTimeZone("Europe/San_Marino")), EUROPE_SARAJEVO(TimeZone.getTimeZone("Europe/Sarajevo")), EUROPE_SIMFEROPOL(TimeZone.getTimeZone("Europe/Simferopol")), EUROPE_SKOPJE(TimeZone.getTimeZone("Europe/Skopje")), EUROPE_SOFIA(
+			TimeZone.getTimeZone("Europe/Sofia")), EUROPE_STOCKHOLM(TimeZone.getTimeZone("Europe/Stockholm")), EUROPE_TALLINN(TimeZone.getTimeZone("Europe/Tallinn")), EUROPE_TIRANE(TimeZone.getTimeZone("Europe/Tirane")), EUROPE_TIRASPOL(
+			TimeZone.getTimeZone("Europe/Tiraspol")), EUROPE_UZHGOROD(TimeZone.getTimeZone("Europe/Uzhgorod")), EUROPE_VADUZ(TimeZone.getTimeZone("Europe/Vaduz")), EUROPE_VATICAN(TimeZone.getTimeZone("Europe/Vatican")), EUROPE_VIENNA(
+			TimeZone.getTimeZone("Europe/Vienna")), EUROPE_VILNIUS(TimeZone.getTimeZone("Europe/Vilnius")), EUROPE_WARSAW(TimeZone.getTimeZone("Europe/Warsaw")), EUROPE_ZAGREB(TimeZone.getTimeZone("Europe/Zagreb")), EUROPE_ZAPOROZHYE(
+			TimeZone.getTimeZone("Europe/Zaporozhye")), EUROPE_ZURICH(TimeZone.getTimeZone("Europe/Zurich")), GB(TimeZone.getTimeZone("GB")), GB_EIRE(TimeZone.getTimeZone("GB-Eire")), GMT(TimeZone.getTimeZone("GMT")), GMT0(TimeZone
+			.getTimeZone("GMT0")), GREENWICH(TimeZone.getTimeZone("Greenwich")), HONGKONG(TimeZone.getTimeZone("Hongkong")), HST(TimeZone.getTimeZone("HST")), ICELAND(TimeZone.getTimeZone("Iceland")), IET(TimeZone.getTimeZone("IET")), INDIAN_ANTANANARIVO(
+			TimeZone.getTimeZone("Indian/Antananarivo")), INDIAN_CHAGOS(TimeZone.getTimeZone("Indian/Chagos")), INDIAN_CHRISTMAS(TimeZone.getTimeZone("Indian/Christmas")), INDIAN_COCOS(TimeZone.getTimeZone("Indian/Cocos")), INDIAN_COMORO(
+			TimeZone.getTimeZone("Indian/Comoro")), INDIAN_KERGUELEN(TimeZone.getTimeZone("Indian/Kerguelen")), INDIAN_MAHE(TimeZone.getTimeZone("Indian/Mahe")), INDIAN_MALDIVES(TimeZone.getTimeZone("Indian/Maldives")), INDIAN_MAURITIUS(
+			TimeZone.getTimeZone("Indian/Mauritius")), INDIAN_MAYOTTE(TimeZone.getTimeZone("Indian/Mayotte")), INDIAN_REUNION(TimeZone.getTimeZone("Indian/Reunion")), IRAN(TimeZone.getTimeZone("Iran")), ISRAEL(TimeZone
+			.getTimeZone("Israel")), IST(TimeZone.getTimeZone("IST")), JAMAICA(TimeZone.getTimeZone("Jamaica")), JAPAN(TimeZone.getTimeZone("Japan")), JST(TimeZone.getTimeZone("JST")), KWAJALEIN(TimeZone.getTimeZone("Kwajalein")), LIBYA(
+			TimeZone.getTimeZone("Libya")), MET(TimeZone.getTimeZone("MET")), MEXICO_BAJANORTE(TimeZone.getTimeZone("Mexico/BajaNorte")), MEXICO_BAJASUR(TimeZone.getTimeZone("Mexico/BajaSur")), MEXICO_GENERAL(TimeZone
+			.getTimeZone("Mexico/General")), MIDEAST_RIYADH87(TimeZone.getTimeZone("Mideast/Riyadh87")), MIDEAST_RIYADH88(TimeZone.getTimeZone("Mideast/Riyadh88")), MIDEAST_RIYADH89(TimeZone.getTimeZone("Mideast/Riyadh89")), MIT(TimeZone
+			.getTimeZone("MIT")), MST(TimeZone.getTimeZone("MST")), MST7MDT(TimeZone.getTimeZone("MST7MDT")), NAVAJO(TimeZone.getTimeZone("Navajo")), NET(TimeZone.getTimeZone("NET")), NST(TimeZone.getTimeZone("NST")), NZ(TimeZone
+			.getTimeZone("NZ")), NZ_CHAT(TimeZone.getTimeZone("NZ-CHAT")), PACIFIC_APIA(TimeZone.getTimeZone("Pacific/Apia")), PACIFIC_AUCKLAND(TimeZone.getTimeZone("Pacific/Auckland")), PACIFIC_CHATHAM(TimeZone
+			.getTimeZone("Pacific/Chatham")), PACIFIC_EASTER(TimeZone.getTimeZone("Pacific/Easter")), PACIFIC_EFATE(TimeZone.getTimeZone("Pacific/Efate")), PACIFIC_ENDERBURY(TimeZone.getTimeZone("Pacific/Enderbury")), PACIFIC_FAKAOFO(
+			TimeZone.getTimeZone("Pacific/Fakaofo")), PACIFIC_FIJI(TimeZone.getTimeZone("Pacific/Fiji")), PACIFIC_FUNAFUTI(TimeZone.getTimeZone("Pacific/Funafuti")), PACIFIC_GALAPAGOS(TimeZone.getTimeZone("Pacific/Galapagos")), PACIFIC_GAMBIER(
+			TimeZone.getTimeZone("Pacific/Gambier")), PACIFIC_GUADALCANAL(TimeZone.getTimeZone("Pacific/Guadalcanal")), PACIFIC_GUAM(TimeZone.getTimeZone("Pacific/Guam")), PACIFIC_HONOLULU(TimeZone.getTimeZone("Pacific/Honolulu")), PACIFIC_JOHNSTON(
+			TimeZone.getTimeZone("Pacific/Johnston")), PACIFIC_KIRITIMATI(TimeZone.getTimeZone("Pacific/Kiritimati")), PACIFIC_KOSRAE(TimeZone.getTimeZone("Pacific/Kosrae")), PACIFIC_KWAJALEIN(TimeZone.getTimeZone("Pacific/Kwajalein")), PACIFIC_MAJURO(
+			TimeZone.getTimeZone("Pacific/Majuro")), PACIFIC_MARQUESAS(TimeZone.getTimeZone("Pacific/Marquesas")), PACIFIC_MIDWAY(TimeZone.getTimeZone("Pacific/Midway")), PACIFIC_NAURU(TimeZone.getTimeZone("Pacific/Nauru")), PACIFIC_NIUE(
+			TimeZone.getTimeZone("Pacific/Niue")), PACIFIC_NORFOLK(TimeZone.getTimeZone("Pacific/Norfolk")), PACIFIC_NOUMEA(TimeZone.getTimeZone("Pacific/Noumea")), PACIFIC_PAGO_PAGO(TimeZone.getTimeZone("Pacific/Pago_Pago")), PACIFIC_PALAU(
+			TimeZone.getTimeZone("Pacific/Palau")), PACIFIC_PITCAIRN(TimeZone.getTimeZone("Pacific/Pitcairn")), PACIFIC_PONAPE(TimeZone.getTimeZone("Pacific/Ponape")), PACIFIC_PORT_MORESBY(TimeZone.getTimeZone("Pacific/Port_Moresby")), PACIFIC_RAROTONGA(
+			TimeZone.getTimeZone("Pacific/Rarotonga")), PACIFIC_SAIPAN(TimeZone.getTimeZone("Pacific/Saipan")), PACIFIC_SAMOA(TimeZone.getTimeZone("Pacific/Samoa")), PACIFIC_TAHITI(TimeZone.getTimeZone("Pacific/Tahiti")), PACIFIC_TARAWA(
+			TimeZone.getTimeZone("Pacific/Tarawa")), PACIFIC_TONGATAPU(TimeZone.getTimeZone("Pacific/Tongatapu")), PACIFIC_TRUK(TimeZone.getTimeZone("Pacific/Truk")), PACIFIC_WAKE(TimeZone.getTimeZone("Pacific/Wake")), PACIFIC_WALLIS(
+			TimeZone.getTimeZone("Pacific/Wallis")), PACIFIC_YAP(TimeZone.getTimeZone("Pacific/Yap")), PLT(TimeZone.getTimeZone("PLT")), PNT(TimeZone.getTimeZone("PNT")), POLAND(TimeZone.getTimeZone("Poland")), PORTUGAL(TimeZone
+			.getTimeZone("Portugal")), PRC(TimeZone.getTimeZone("PRC")), PRT(TimeZone.getTimeZone("PRT")), PST(TimeZone.getTimeZone("PST")), PST8PDT(TimeZone.getTimeZone("PST8PDT")), ROK(TimeZone.getTimeZone("ROK")), SINGAPORE(TimeZone
+			.getTimeZone("Singapore")), SST(TimeZone.getTimeZone("SST")), SYSTEMV_AST4(TimeZone.getTimeZone("SystemV/AST4")), SYSTEMV_AST4ADT(TimeZone.getTimeZone("SystemV/AST4ADT")), SYSTEMV_CST6(TimeZone.getTimeZone("SystemV/CST6")), SYSTEMV_CST6CDT(
+			TimeZone.getTimeZone("SystemV/CST6CDT")), SYSTEMV_EST5(TimeZone.getTimeZone("SystemV/EST5")), SYSTEMV_EST5EDT(TimeZone.getTimeZone("SystemV/EST5EDT")), SYSTEMV_HST10(TimeZone.getTimeZone("SystemV/HST10")), SYSTEMV_MST7(TimeZone
+			.getTimeZone("SystemV/MST7")), SYSTEMV_MST7MDT(TimeZone.getTimeZone("SystemV/MST7MDT")), SYSTEMV_PST8(TimeZone.getTimeZone("SystemV/PST8")), SYSTEMV_PST8PDT(TimeZone.getTimeZone("SystemV/PST8PDT")), SYSTEMV_YST9(TimeZone
+			.getTimeZone("SystemV/YST9")), SYSTEMV_YST9YDT(TimeZone.getTimeZone("SystemV/YST9YDT")), TURKEY(TimeZone.getTimeZone("Turkey")), UCT(TimeZone.getTimeZone("UCT")), UNIVERSAL(TimeZone.getTimeZone("Universal")), US_ALASKA(TimeZone
+			.getTimeZone("US/Alaska")), US_ALEUTIAN(TimeZone.getTimeZone("US/Aleutian")), US_ARIZONA(TimeZone.getTimeZone("US/Arizona")), US_CENTRAL(TimeZone.getTimeZone("US/Central")), US_EAST_INDIANA(TimeZone
+			.getTimeZone("US/East-Indiana")), US_EASTERN(TimeZone.getTimeZone("US/Eastern")), US_HAWAII(TimeZone.getTimeZone("US/Hawaii")), US_INDIANA_STARKE(TimeZone.getTimeZone("US/Indiana-Starke")), US_MICHIGAN(TimeZone
+			.getTimeZone("US/Michigan")), US_MOUNTAIN(TimeZone.getTimeZone("US/Mountain")), US_PACIFIC(TimeZone.getTimeZone("US/Pacific")), US_PACIFIC_NEW(TimeZone.getTimeZone("US/Pacific-New")), US_SAMOA(TimeZone.getTimeZone("US/Samoa")), UTC(
+			TimeZone.getTimeZone("UTC")), VST(TimeZone.getTimeZone("VST")), W_SU(TimeZone.getTimeZone("W-SU")), WET(TimeZone.getTimeZone("WET")), ZULU(TimeZone.getTimeZone("Zulu"));
+
+	private final TimeZone tz;
+
+	private TimeZones(final TimeZone tz) {
+		this.tz = tz;
+	}
+
+	public final TimeZone getTimeZone() {
+		return tz;
+	}
+
+}
Index: app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianCalendarUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianCalendarUtils.java	(revision )
+++ app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianCalendarUtils.java	(revision )
@@ -0,0 +1,157 @@
+package com.reserv.myapplicationeli.tools.persian.Calendar.persian.util;
+
+import java.util.Calendar;
+import java.util.Date;
+
+/**
+ * Persian Calendar see: http://code.google.com/p/persian-calendar/
+   Copyright (C) 2012  Mortezaadi@gmail.com
+   PersianCalendarUtils.java
+   
+   Persian Calendar is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+/**
+ * algorithms for converting Julian days to the Persian calendar, and vice versa are adopted
+ * from <a href="casema.nl/couprie/calmath/persian/index.html">couprie.nl</a>
+ * written in VB.
+ * The algorithms is not exactly the same as its original.
+ * I've done some minor changes in the sake of performances and
+ * corrected some bugs.
+ * 
+ * @author Morteza  contact: <a href="mailto:Mortezaadi@gmail.com">Mortezaadi@gmail.com</a>
+ * @version 1.0
+ *
+ */
+public class PersianCalendarUtils {
+    
+    /**
+     * Converts a provided Persian (Shamsi) date to the Julian Day Number
+     *  (i.e. the number of days since January 1 in the year 4713 BC).
+     *  Since the Persian calendar is a highly regular calendar, converting to and from a Julian Day Number
+     *   is not as difficult as it looks. Basically it's a mather of dividing, rounding and multiplying.
+     *   This routine uses Julian Day Number 1948321 as focal point, since that Julian Day Number
+     *    corresponds with 1 Farvardin (1) 1. 
+     * @param year int persian year
+     * @param month int persian month
+     * @param day int persian day
+     * @return long
+     */
+    public static long persianToJulian(long year, int month, int day) {      
+        return 365L * ((ceil(year - 474L, 2820D) + 474L) - 1L)
+                + ((long) Math.floor((682L * (ceil(year - 474L, 2820D) + 474L) - 110L) / 2816D))
+                + (PersianCalendarConstants.PERSIAN_EPOCH - 1L)
+                + 1029983L * ((long) Math.floor((year - 474L) / 2820D)) 
+                + (month < 7? 31 * month: 30 * month + 6 ) + day;
+    }
+    
+    public static final long persianToJdn(int year, int month, int day) {
+		final long PERSIAN_EPOCH = 1948321; // The JDN of 1 Farvardin 1
+
+		long epbase;
+		if (year >= 0)
+			epbase = year - 474;
+		else
+			epbase = year - 473;
+
+		long epyear = 474 + (epbase % 2820);
+
+		long mdays;
+		if (month <= 7)
+			mdays = (month - 1) * 31;
+		else
+			mdays = (month - 1) * 30 + 6;
+
+		return day + mdays + ((epyear * 682) - 110) / 2816 + (epyear - 1) * 365
+				+ epbase / 2820 * 1029983 + (PERSIAN_EPOCH - 1);
+	}
+    
+    public static Date ShamsiToMilady(int yearF, int monthF, int dayF) {
+    	   int jalpha,ja,jb,jc,jd,je,year,month,day;
+    	   double julian = persianToJdn(yearF,monthF,dayF) + 0.5 / 86400.0;
+    	   ja = (int) julian;
+    	   int JGREG= 15 + 31*(10+12*1582);
+    	   if (ja>= JGREG) {
+    	     jalpha = (int) (((ja - 1867216) - 0.25) / 36524.25);
+    	     ja = ja + 1 + jalpha - jalpha / 4;
+    	   }
+
+    	   jb = ja + 1524;
+    	   jc = (int) (6680.0 + ((jb - 2439870) - 122.1) / 365.25);
+    	   jd = 365 * jc + jc / 4;
+    	   je = (int) ((jb - jd) / 30.6001);
+    	   day = jb - jd - (int) (30.6001 * je);
+    	   month = je - 1;
+    	   if (month > 12) month = month - 12;
+    	   year = jc - 4715;
+    	   if (month > 2) year--;
+    	   if (year <= 0) year--;
+    	   Calendar cal = Calendar.getInstance();
+    	   cal.set(Calendar.DAY_OF_MONTH,day);
+    	   cal.set(Calendar.MONTH,month-1);
+    	   cal.set(Calendar.YEAR,year);
+    	   return cal.getTime();
+    	  }
+    
+    public int ShamsiDiff(String persianDate1,String persianDate2){
+    	String[] Date1=persianDate1.split("/");
+    	String[] Date2=persianDate2.split("/");
+    	return (int)(persianToJdn(Integer.parseInt(Date2[0]),Integer.parseInt(Date2[1]),Integer.parseInt(Date2[2]))-persianToJdn(Integer.parseInt(Date1[0]),Integer.parseInt(Date1[1]),Integer.parseInt(Date1[2])));
+    }
+    
+    /**
+     * Calculate whether current year is Leap year in persian or not
+     * @return boolean
+     */
+    public static boolean isPersianLeapYear(int persianYear) {
+        return PersianCalendarUtils.ceil((38D
+                +(PersianCalendarUtils.ceil(persianYear - 474L, 2820L) + 474L)) * 682D, 2816D) < 682L;
+    }
+
+    /**
+     * Converts a provided Julian Day Number
+     * (i.e. the number of days since January 1 in the year 4713 BC) to the Persian (Shamsi) date.
+     * Since the Persian calendar is a highly regular calendar, converting to and from a Julian Day Number
+     * is not as difficult as it looks. Basically it's a mather of dividing, rounding and multiplying.
+     * @param julianDate
+     * @return long
+     */
+    public static long julianToPersian(long julianDate) {
+        long persianEpochInJulian = julianDate - persianToJulian(475L, 0, 1);
+        long cyear = ceil(persianEpochInJulian, 1029983D);
+        long ycycle = cyear != 1029982L? ((long) Math.floor((2816D * (double)cyear + 1031337D)/ 1028522D)): 2820L;
+        long year = 474L + 2820L * ((long) Math.floor(persianEpochInJulian / 1029983D)) + ycycle;
+        long aux = (1L + julianDate) - persianToJulian(year, 0, 1);
+        int month = (int)(aux > 186L? Math.ceil((double)(aux - 6L) / 30D) - 1: Math.ceil((double)aux / 31D) - 1);
+        int day = (int)(julianDate - (persianToJulian(year, month, 1) - 1L));
+        return (year << 16) | (month << 8) | day;
+    }
+    
+
+    
+    /**
+     * Ceil function in original algorithm
+     * @param double1
+     * @param double2
+     * @return long
+     */
+    public static long ceil(double double1, double double2) {
+        return (long) (double1 - double2 * Math.floor(double1 / double2));
+    }
+    
+  
+    
+
+  
+}
Index: app/src/main/java/com/reserv/myapplicationeli/views/activities/hotel/activity/GetHotelCityActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.reserv.myapplicationeli.views.activities.hotel.activity;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.lang.reflect.Method;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.protocol.HTTP;\nimport org.apache.http.util.EntityUtils;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport android.app.Activity;\nimport android.app.ProgressDialog;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.EditText;\nimport android.widget.ListView;\nimport android.widget.Toast;\n\nimport com.reserv.myapplicationeli.R;\nimport com.reserv.myapplicationeli.base.BaseActivity;\nimport com.reserv.myapplicationeli.models.model.HotelCity;\nimport com.reserv.myapplicationeli.views.adapters.GetHotelCityAdapter;\nimport com.reserv.myapplicationeli.views.components.Header;\n\n\npublic class GetHotelCityActivity extends BaseActivity implements Header.onSearchTextChangedListener,OnClickListener{\n\t   public static final int CONNECTION_TIMEOUT = 10000;\n\t    public static final int READ_TIMEOUT = 15000;\n\t\tHandler handler;\n\t\tProgressDialog progressBar;\n\t\tprivate Handler progressBarHandler = new Handler();\n\t\tpublic ListView listCityHotel;\n\t\tArrayList<HashMap<String,String>> mylist=null;\n\t\t public static String searchText = \"\";\n\t\t\n\t\t GetHotelCityAdapter mAdapter;\n\t\tprivate EditText searchtxt;\n\t\t@Override\n\t\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t\tsuper.onCreate(savedInstanceState);\n\t\t\tsetContentView(R.layout.activity_get_city_hotel);\n\t\t\t\n\t\t\t//searchtxt = (EditText) findViewById(R.id.searchtxt);\n\t\t    //Make call to AsyncTask\n\t        new AsyncFetch().execute();\n\t        \n\t    \tsearchtxt = (EditText) findViewById(R.id.searchtxt);\n\t\t\tsearchtxt.addTextChangedListener(\n\t                new TextWatcher() {\n\t                    @Override public void onTextChanged(CharSequence s, int start, int before, int count) { }\n\t                    @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) { }\n\n\t                    private Timer timer=new Timer();\n\t                    private final long DELAY = 10; // milliseconds\n\n\t                    @Override\n\t                    public void afterTextChanged(final Editable s) {\n\t                        timer.cancel();\n\t                        timer = new Timer();\n\t                        timer.schedule(\n\t                                new TimerTask() {\n\t                                    @Override\n\t                                    public void run() {\n\t                                       runOnUiThread(new Runnable() {\n\t                                            @Override\n\t                                            public void run() {\n\t                                            \tString d = s.toString().trim(); \n\t                                            \tif(d.length()>2){\n\t                                            \t\t\n\t                                            \t GetHotelCityActivity.searchText = d.toLowerCase();\n\t                                            \t new AsyncFetch().execute();\n\t                                            \t \n\t                                            \t }\n\t                                            \t\n\t                                            }\n\t                                        });\n\t                                    }\n\t                                },\n\t                                DELAY\n\t                        );\n\t                    }\n\t                }\n\t        );\n\t    }//end oncreate\n\n\t    private class AsyncFetch extends AsyncTask<String, String, String> {\n\t        ProgressDialog pdLoading = new ProgressDialog(GetHotelCityActivity.this);\n\t        HttpURLConnection conn;\n\t        URL url = null;\n\t\t\tprivate ListView listAirPort;\n\n\t        @Override\n\t        protected void onPreExecute() {\n\t            super.onPreExecute();\n\n\t          /*  //this method will be running on UI thread\n\t            pdLoading.setMessage(\"\\tLoading...\");\n\t            pdLoading.setCancelable(false);\n\t            pdLoading.show();\n*/\n\t        }\n\n\t        @Override\n\t        protected String doInBackground(String... params) {\n\t            try {\n\n\t                // Enter URL address where your json file resides\n\t                // Even you can make call to php file which returns json data\n\t                url = new URL(\"http://mobilews.eligasht.com/LightServices/Rest/Common/StaticDataService.svc/GetHotelList\");\n\n\t            } catch (MalformedURLException e) {\n\t                // TODO Auto-generated catch block\n\t                e.printStackTrace();\n\t                return e.toString();\n\t            }\n\t            try {\n\n\t                // Setup HttpURLConnection class to send and receive data from php and mysql\n\t                conn = (HttpURLConnection) url.openConnection();\n\t                conn.setReadTimeout(READ_TIMEOUT);\n\t                conn.setConnectTimeout(CONNECTION_TIMEOUT);\n\t               // conn.setRequestMethod(\"GET\");\n\t                conn.setRequestMethod(\"POST\");\n\t                // setDoOutput to true as we recieve data from json file\n\t                conn.setDoOutput(true);\n\n\t            } catch (IOException e1) {\n\t                // TODO Auto-generated catch block\n\t                e1.printStackTrace();\n\t                return e1.toString();\n\t            }\n\n\t            try {\n\n\t                int response_code = conn.getResponseCode();\n\n\t            String serial = null;\n\t\t\t\t\t\n\t\t\t\t\tJSONObject errorObj = new JSONObject();\n\t\t\t\t\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\terrorObj.put(\"Success\", false);\n\t\t\t\t\t\t\n\t\t\t\t\t\tClass<?> c = Class.forName(\"android.os.SystemProperties\");\n\t\t\t\t\t\tMethod get = c.getMethod(\"get\", String.class);\n\t\t\t\t\t\tserial = (String) get.invoke(c, \"ro.serialno\");//31007a81d4b22300\n\t\t\t\t\t} catch (Exception ignored) {\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tString data =OrderToJson();\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\tHttpClient client = new DefaultHttpClient();\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\tHttpPost post = new HttpPost();\n\t\t\t\t\t\tpost = new HttpPost(\"http://mobilews.eligasht.com/LightServices/Rest/Common/StaticDataService.svc/GetHotelList\");\n\t\t\t\t\t\tpost.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n\t\t\t\t\t\tpost.setHeader(\"Accept\", \"application/json; charset=UTF-8\");\n\t\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\tStringEntity se = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tse = new StringEntity(data, \"UTF-8\");\n\t\t\t\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpost.setEntity(se);\n\t\t\t\t\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n\t\t\t\t\t\t//{\"GetAirportWithParentsResult\":{\"Errors\":[],\"List\":[{\"Key\":\"IST|Istanbul, Turkey (IST-All Airports)\",\"Value\":\"استانبول ( همه فرودگاه ها ),نزدیک استانبول, ترکیه\"},{\"Key\":\"IST|Istan\n\t\t\t\t\t\t//try {\n\t\t\t\t\t\t\t   HashMap<String, String> airport = null;\n\t\t\t\t\t\t\tmylist = new ArrayList<HashMap<String, String>>();\n\t\t\t\t\t\t\tHttpResponse res = client.execute(post);\n\t\t\t\t\t\t\tString retSrc = EntityUtils.toString(res.getEntity(), HTTP.UTF_8);\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t  \n\t\t\t\t\t\t                    return (retSrc);\n\t\t\t\t\t\n\t\t\t\t\t\t              \n\t\t\t\t\t\n\t\t\t\t\t\t            } catch (IOException e) {\n\t\t\t\t\t\t                e.printStackTrace();\n\t\t\t\t\t\t                return e.toString();\n\t\t\t\t\t\t            } finally {\n\t\t\t\t\t\t                conn.disconnect();\n\t\t\t\t\t\t            }\n\n\n\t        }\n\n\t        @Override\n\t        protected void onPostExecute(String result) {\n\n\t            //this method will be running on UI thread\n\n\t       //     pdLoading.dismiss();\n\t            List<HotelCity> data=new ArrayList<HotelCity>();\n\n\t            pdLoading.dismiss();\n\t            try {\n////////////////////////////\n\t            \tJSONObject jsonObj = new JSONObject(result);\n\t\t\t\t\t\n\t\t\t\t\t // JSONObject jsonObj = new JSONObject(retSrc);\n\t\t\t\t\t  \n\t\t              // Getting JSON Array node\n\t\t\t\t  JSONObject GetAirportsResult = jsonObj.getJSONObject(\"GetHotelListResult\");\n\t\t              JSONArray jArray = GetAirportsResult.getJSONArray(\"Cities\");//AirportCode //AirportName//CityName \":\n\t            \t//////////////////////////////\n\t      \n\t                // Extract data from json and store into ArrayList as class objects\n\t                for(int i=0;i<jArray.length();i++){\n\t                    JSONObject json_data = jArray.getJSONObject(i);\n\t                    HotelCity hotelCity = new HotelCity();\n\t                    hotelCity.setCityCode(json_data.getString(\"CityCode\")) ;\n\t                    hotelCity.setCityID(json_data.getInt(\"CityID\")) ;\n\t                    hotelCity.setCityNameEn(json_data.getString(\"CityNameEn\")) ;\n\t                    hotelCity.setCityNameFa(json_data.getString(\"CityNameFa\")) ;\n\t                    hotelCity.setCountryID(json_data.getInt(\"CountryID\")) ;\n\t                  \n\t                    data.add(hotelCity);\n\t                }\n\n\t           \n\t                \n\t                ////\n\t                listAirPort = (ListView)findViewById(R.id.listCityHotel);\n\t                  mAdapter = new GetHotelCityAdapter(GetHotelCityActivity.this,GetHotelCityActivity.this, data);\n\t                //mAdapter.setAdapter(mAdapter);\n\t                mAdapter.setData(data);\n\t                listAirPort.setAdapter(mAdapter);\n\t                //mAdapter.setLayoutManager(new LinearLayoutManager(GetAirportActivity.this));\n\n\t            } catch (JSONException e) {\n\t                Toast.makeText(GetHotelCityActivity.this, e.toString(), Toast.LENGTH_LONG).show();\n\t            }\n\n\t        }\n\n\t    }//end asynTask\n\t   public String OrderToJson() {\n\t\t   JSONObject jsone = new JSONObject();\n\t\t\tJSONObject manJson = new JSONObject();\n\t\t\tJSONObject identityJson = new JSONObject();\n\t\t\t\n\t\t\t\n\t\t\ttry {\n\t\t\t\t\n\t\t\t\tmanJson.put(\"city\", GetHotelCityActivity.searchText);\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t identityJson.put(\"Password\", \"123qwe!@#QWE\");\n\t\t\t\t identityJson.put(\"TermianlId\", \"Mobile\");\n\t\t\t\t identityJson.put(\"UserName\", \"EligashtMlb\");\n\t\t\t\t manJson.put(\"identity\",identityJson);\n\t\t\t\t//manJson.put(\"CityCode\",URLEncoder.encode(GetAirportActivity.searchText,\"UTF-8\"));\n\t\t\t\tjsone.put(\"request\",manJson);\n\t\t\n\t\t\t\t\n\t\t\t} catch (JSONException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\treturn jsone.toString();\n\t\t}\n\t\t@Override\n\t\tpublic void onClick(View v) {\n\t\t\t// TODO Auto-generated method stub\n\t\t\t\n\t\t}\n\t\t@Override\n\t\tpublic void searchTextChanged(String searchText) {\n\t\t\t/*this.searchText = searchText;\n\t\t\tif(searchText.length()>2)\n\t\t\tnew AsyncFetch().execute();*/\n\t\t\t//mAdapter.setData(searchText);\n\t\t\t\n\t\t}\n\t}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/views/activities/hotel/activity/GetHotelCityActivity.java	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ app/src/main/java/com/reserv/myapplicationeli/views/activities/hotel/activity/GetHotelCityActivity.java	(revision )
@@ -114,11 +114,11 @@
 	        protected void onPreExecute() {
 	            super.onPreExecute();
 
-	          /*  //this method will be running on UI thread
+	            //this method will be running on UI thread
 	            pdLoading.setMessage("\tLoading...");
 	            pdLoading.setCancelable(false);
 	            pdLoading.show();
-*/
+
 	        }
 
 	        @Override
@@ -216,7 +216,7 @@
 
 	            //this method will be running on UI thread
 
-	       //     pdLoading.dismiss();
+	            pdLoading.dismiss();
 	            List<HotelCity> data=new ArrayList<HotelCity>();
 
 	            pdLoading.dismiss();
Index: app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/Date.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/Date.java	(revision )
+++ app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/Date.java	(revision )
@@ -0,0 +1,51 @@
+package com.reserv.myapplicationeli.tools.persian.Calendar;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+
+
+
+/**
+ * __  ____   _____ _____
+ * |  \/  \ \ / /_ _|_   _|
+ * | |\/| |\ V / | |  | |
+ * |_|  |_| \_/ |___| |_|
+ * Maheen Veera Information Technology
+ * http://mvit.ir
+ * Intelligent Transportation Service Management (ITSM) Project
+ * Authors:
+ * Reza Nejati <nejati@mvit.ir>
+ * Mohammad Saleh Shirani <shirani@mvit.ir>
+ * Ali MasudianPour <masudianpour@mvit.ir>
+ * Copyright © 2016
+ */
+public class Date {
+    String date_;
+    String date;
+
+    public String getGregorianDate() {
+        return date_;
+    }
+
+    public String getPersianDate() {
+        return date;
+    }
+
+
+    public Date() {
+        Calendar cal = Calendar.getInstance();
+        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd   HH:mm:ss");
+        date_ = dateFormat.format(cal.getTime());
+        date = dateFormat.format(cal.getTime());
+        String[] date_parts = date.split("\\s+");
+        String[] _date = date_parts[0].split("/");
+        String year = _date[0];
+        String month = _date[1];
+        String day = _date[2];
+        CalendarTool ct = new CalendarTool(Integer.valueOf(year), Integer.valueOf(month), Integer.valueOf(day));
+        date= ct.getIranianDate().toString() + "\r" + date_parts[1];
+
+
+    }
+
+}
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>include ':app'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- settings.gradle	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ settings.gradle	(revision )
@@ -1,1 +1,3 @@
 include ':app'
+include ':materialdatetimepicker'
+include ':persianmaterialdatetimepicker'
Index: app/src/main/java/com/reserv/myapplicationeli/views/activities/hotel/activity/SelectHotelActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.reserv.myapplicationeli.views.activities.hotel.activity;\n\nimport android.content.Intent;\nimport android.os.AsyncTask;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.Window;\nimport android.widget.AdapterView;\nimport android.widget.ListView;\nimport android.widget.RelativeLayout;\nimport android.widget.Toast;\n\nimport com.google.gson.Gson;\nimport com.reserv.myapplicationeli.R;\nimport com.reserv.myapplicationeli.api.hotel.hotelAvail.HotelAvailApi;\nimport com.reserv.myapplicationeli.base.BaseActivity;\nimport com.reserv.myapplicationeli.models.hotel.adapter.SelectHotelModel;\nimport com.reserv.myapplicationeli.models.hotel.api.call.HotelAvailRequestModel;\nimport com.reserv.myapplicationeli.models.hotel.api.call.Identity;\nimport com.reserv.myapplicationeli.models.hotel.api.call.Request;\nimport com.reserv.myapplicationeli.models.hotel.api.call.Rooms;\nimport com.reserv.myapplicationeli.models.hotel.api.response.HotelAvailModelResponse;\nimport com.reserv.myapplicationeli.models.hotel.api.response.HotelAvailResult;\nimport com.reserv.myapplicationeli.models.hotel.api.response.Hotels;\nimport com.reserv.myapplicationeli.tools.Utility;\nimport com.reserv.myapplicationeli.views.adapters.hotel.LazyResoultHotelAdapter;\nimport com.reserv.myapplicationeli.views.lazyloading.ImageLoader;\nimport com.reserv.myapplicationeli.views.ui.InitUi;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n\npublic class SelectHotelActivity extends BaseActivity {\n\n\n    private ListView list;\n    private LazyResoultHotelAdapter adapter;\n    private ArrayList<SelectHotelModel> selectHotelModelArrayList = new ArrayList<>();\n    private HotelAvailApi availApi;\n    private List<Rooms> rooms = new ArrayList<>();\n    RelativeLayout rlLoading,rlRoot;\n    Window window;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_search_hotel);\n        InitUi.Toolbar(this, false, R.color.flight_status, \" چهارشنبه 28 اسفند-دوشنبه 5 فروردین \");\n        window = getWindow();\n        list = findViewById(R.id.lvHoteResult);\n        adapter = new LazyResoultHotelAdapter(selectHotelModelArrayList, this, this);\n        list.setAdapter(adapter);\n        rooms.add(new Rooms(2, 0));\n\n\n        rlLoading=findViewById(R.id.rlLoading);\n        rlRoot=findViewById(R.id.rlRoot);\n        new GetHotelAsync().execute();\n\n        list.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                startActivity(new Intent(SelectHotelActivity.this,DetailHotelActivity.class));\n            }\n        });\n\n\n\n\n\n    }\n\n\n    private class GetHotelAsync extends AsyncTask<String, Void, String> {\n\n        protected void onPreExecute() {\n            window.setStatusBarColor(getColor(R.color.blue2));\n\n            new InitUi().Loading(rlLoading,rlRoot,true);\n\n        }\n\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                availApi = new HotelAvailApi(new HotelAvailRequestModel(new Request(\"H\", new Identity(\"EligashtMlb\", \"123qwe!@#QWE\", \"Mobile\"),\n                        \"2018-02-02\", \"2018-02-10\", \"c24452\", \"DXB\", rooms, \"2,0,0,0,0,0\")));\n\n            } catch (Exception e) {\n\n            }\n            return \"Executed\";\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            new InitUi().Loading(rlLoading,rlRoot,false);\n            window.setStatusBarColor(getColor(R.color.colorPrimaryDark));\n\n\n            try {\n                int i = 0;\n                for (Hotels hotels : availApi.hotelAvailModelResponse.HotelAvailResult.HotelSearchResult.Hotels) {\n\n                    selectHotelModelArrayList.add(new SelectHotelModel(hotels.Name, hotels.City, hotels.Availability.RoomLists.get(i).Title,\n                            hotels.Availability.RoomLists.get(i).Board, hotels.Availability.RoomLists.get(i).Price, hotels.MainImage, hotels.Location,\n                            hotels.Availability.RoomLists.get(i).OldPrice,hotels.StarRating));\n                    //   i++;\n\n                }\n                adapter.notifyDataSetChanged();\n            }catch (Exception e){\n                Toast.makeText(SelectHotelActivity.this, \"خطا در ارتباط\", Toast.LENGTH_SHORT).show();\n                finish();\n            }\n\n\n        }\n\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/views/activities/hotel/activity/SelectHotelActivity.java	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ app/src/main/java/com/reserv/myapplicationeli/views/activities/hotel/activity/SelectHotelActivity.java	(revision )
@@ -13,6 +13,11 @@
 import android.widget.Toast;
 
 import com.google.gson.Gson;
+import com.mohamadamin.persianmaterialdatetimepicker.date.DatePickerDialog;
+import com.mohamadamin.persianmaterialdatetimepicker.time.RadialPickerLayout;
+import com.mohamadamin.persianmaterialdatetimepicker.time.TimePickerDialog;
+import com.mohamadamin.persianmaterialdatetimepicker.utils.PersianCalendar;
+import com.pixplicity.easyprefs.library.Prefs;
 import com.reserv.myapplicationeli.R;
 import com.reserv.myapplicationeli.api.hotel.hotelAvail.HotelAvailApi;
 import com.reserv.myapplicationeli.base.BaseActivity;
@@ -30,6 +35,7 @@
 import com.reserv.myapplicationeli.views.ui.InitUi;
 
 import java.util.ArrayList;
+import java.util.Calendar;
 import java.util.List;
 
 
@@ -43,6 +49,10 @@
     private List<Rooms> rooms = new ArrayList<>();
     RelativeLayout rlLoading,rlRoot;
     Window window;
+    private DatePickerDialog datePickerDialog;
+    private DatePickerDialog returnDatePicker;
+
+
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -60,6 +70,10 @@
         rlRoot=findViewById(R.id.rlRoot);
         new GetHotelAsync().execute();
 
+        Log.e("raft", getIntent().getExtras().getString("CheckIn"));
+        Log.e("bargasht", getIntent().getExtras().getString("CheckOut"));
+        Log.e("cod", 	Prefs.getString("Value-Hotel-City-Code","") );
+
         list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
             @Override
             public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
@@ -70,8 +84,8 @@
 
 
 
-
     }
+
 
 
     private class GetHotelAsync extends AsyncTask<String, Void, String> {
@@ -87,7 +101,7 @@
         protected String doInBackground(String... params) {
             try {
                 availApi = new HotelAvailApi(new HotelAvailRequestModel(new Request("H", new Identity("EligashtMlb", "123qwe!@#QWE", "Mobile"),
-                        "2018-02-02", "2018-02-10", "c24452", "DXB", rooms, "2,0,0,0,0,0")));
+                        getIntent().getExtras().getString("CheckIn"), getIntent().getExtras().getString("CheckOut"), "c24452", 	Prefs.getString("Value-Hotel-City-Code",""), rooms, "2,0,0,0,0,0")));
 
             } catch (Exception e) {
 
Index: app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\n        <!-- Customize your theme here. -->\n        <item name=\"colorPrimary\">@color/colorPrimary</item>\n        <item name=\"colorPrimaryDark\">@color/colorPrimaryDark</item>\n        <item name=\"colorAccent\">@color/colorAccent</item>\n        <item name=\"windowActionBar\">false</item>\n        <item name=\"windowNoTitle\">true</item>\n    </style>\n    <style name=\"MyListBackContent\">\n        <item name=\"android:layout_width\">fill_parent</item>\n        <item name=\"android:layout_height\">fill_parent</item>\n        <item name=\"android:background\">@drawable/background_back</item>\n        <item name=\"android:gravity\">center</item>\n    </style>\n\n    <style name=\"MyListFrontContent\">\n        <item name=\"android:layout_width\">fill_parent</item>\n        <item name=\"android:layout_height\">fill_parent</item>\n        <item name=\"android:background\">@drawable/background_frontt</item>\n        <item name=\"android:padding\">8dp</item>\n    </style>\n    <style name=\"MyListFrontContentRe\">\n        <item name=\"android:layout_width\">fill_parent</item>\n        <item name=\"android:layout_height\">fill_parent</item>\n\n        <item name=\"android:padding\">8dp</item>\n    </style>\n    <style name=\"MyListButtonAction\">\n        <item name=\"android:layout_margin\">5dp</item>\n        <item name=\"android:layout_width\">80dp</item>\n        <item name=\"android:layout_height\">30dp</item>\n\n    </style>\n\n    <style name=\"MyListImage\">\n        <item name=\"android:layout_width\">64dp</item>\n        <item name=\"android:layout_height\">64dp</item>\n        <item name=\"android:scaleGravity\">fill</item>\n        <item name=\"android:layout_marginRight\">8dp</item>\n    </style>\n\n    <style name=\"MyListTitle\">\n        <item name=\"android:paddingBottom\">8dp</item>\n        <item name=\"android:textSize\">17sp</item>\n        <item name=\"android:textStyle\">bold</item>\n        <item name=\"android:maxLines\">2</item>\n        <item name=\"android:ellipsize\">end</item>\n    </style>\n    <style name=\"StyledDialog\" parent=\"@android:style/Theme.Dialog\">\n        <item name=\"android:windowBackground\">@drawable/flight_loading_background</item>\n\n    </style>\n\n\n    <style name=\"fancy_toolbar\">\n        <item name=\"android:layout_width\">50dp</item>\n        <item name=\"android:layout_height\">50dp</item>\n        <item name=\"fb_radius\">100dp</item>\n        <item name=\"fb_textColor\">@android:color/white</item>\n        <item name=\"fb_textSize\">40dp</item>\n        <item name=\"android:paddingBottom\">2dp</item>\n        <item name=\"fb_defaultColor\">@android:color/transparent</item>\n        <item name=\"fb_focusColor\">@color/focusColor</item>\n        <item name=\"fb_text\">&#xe912;</item>\n        <item name=\"android:layout_margin\">5dp</item>\n\n\n    </style>\n    <style name=\"IconFonts\" parent=\"android:TextAppearance\">\n        <item name=\"fontPath\">fonts/icomoon.ttf</item></style>\n    <style name=\"IconFonts2\" parent=\"android:TextAppearance\">\n        <item name=\"fontPath\">fonts/wifi.ttf</item></style>\n    <style name=\"IrsansBold\" parent=\"android:TextAppearance\">\n        <item name=\"fontPath\">fonts/iran_sans_bold.ttf</item></style>\n</resources>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/styles.xml	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ app/src/main/res/values/styles.xml	(revision )
@@ -9,6 +9,14 @@
         <item name="windowActionBar">false</item>
         <item name="windowNoTitle">true</item>
     </style>
+
+
+
+    <style name="AppTheme.Picker" parent="Theme.AppCompat.Light.NoActionBar" >
+        <item name="android:textColorPrimary">@color/app_base_color</item>
+    </style>
+
+
     <style name="MyListBackContent">
         <item name="android:layout_width">fill_parent</item>
         <item name="android:layout_height">fill_parent</item>
Index: app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/PersianDatePicker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/PersianDatePicker.java	(revision )
+++ app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/PersianDatePicker.java	(revision )
@@ -0,0 +1,365 @@
+package com.reserv.myapplicationeli.tools.persian.Calendar.persian;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.content.res.TypedArray;
+import android.graphics.Paint;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.NumberPicker;
+import android.widget.TextView;
+
+import com.reserv.myapplicationeli.R;
+import com.reserv.myapplicationeli.tools.persian.Calendar.persian.util.PersianCalendar;
+import com.reserv.myapplicationeli.tools.persian.Calendar.persian.util.PersianCalendarConstants;
+import com.reserv.myapplicationeli.tools.persian.Calendar.persian.util.PersianCalendarUtils;
+
+import java.lang.reflect.Field;
+import java.util.Date;
+
+
+
+public class PersianDatePicker extends LinearLayout {
+	private OnDateChangedListener mListener;
+	private NumberPicker yearNumberPicker;
+	private NumberPicker monthNumberPicker;
+	private NumberPicker dayNumberPicker;
+	private int minYear;
+	private int maxYear;
+	private int yearRange;
+	private boolean displayDescription;
+	private TextView descriptionTextView;
+	String date="";
+
+	public PersianDatePicker(Context context) {
+		this(context, null, -1);
+	}
+
+	public PersianDatePicker(Context context, AttributeSet attrs) {
+		this(context, attrs, -1);
+	}
+
+	public PersianDatePicker(Context context, AttributeSet attrs, int defStyle) {
+		super(context, attrs, defStyle);
+		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+		View view = inflater.inflate(R.layout.sl_persian_date_picker, this);
+		yearNumberPicker = (NumberPicker) view.findViewById(R.id.yearNumberPicker);
+		monthNumberPicker = (NumberPicker) view.findViewById(R.id.monthNumberPicker);
+		dayNumberPicker = (NumberPicker) view.findViewById(R.id.dayNumberPicker);
+		setDividerColor(yearNumberPicker);
+		setDividerColor(monthNumberPicker);
+		setDividerColor(dayNumberPicker);
+		setNumberPickerTextColor(monthNumberPicker,getResources().getColor(R.color.app_base_color));
+		setNumberPickerTextColor(monthNumberPicker,getResources().getColor(R.color.app_base_color));
+		setNumberPickerTextColor(dayNumberPicker,getResources().getColor(R.color.app_base_color));
+
+		descriptionTextView = (TextView) view.findViewById(R.id.descriptionTextView);
+		PersianCalendar pCalendar = new PersianCalendar();
+		TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.PersianDatePicker, 0, 0);
+		boolean disableSoftKeyboard = a.getBoolean(R.styleable.PersianDatePicker_disableSoftKeyboard, false);
+		if(disableSoftKeyboard)
+		{
+			yearNumberPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);
+			monthNumberPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);
+			dayNumberPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);
+		}
+		yearRange = a.getInteger(R.styleable.PersianDatePicker_yearRange, 10);
+
+		/*
+		 * Initializing yearNumberPicker min and max values If minYear and
+		 * maxYear attributes are not set, use (current year - 10) as min and
+		 * (current year + 10) as max.
+		 */
+		minYear = a.getInt(R.styleable.PersianDatePicker_minYear, pCalendar.getPersianYear() - yearRange);
+		maxYear = a.getInt(R.styleable.PersianDatePicker_maxYear, pCalendar.getPersianYear() + yearRange);
+		yearNumberPicker.setMinValue(minYear);
+		yearNumberPicker.setMaxValue(maxYear);
+
+		int selectedYear = a.getInt(R.styleable.PersianDatePicker_selectedYear, pCalendar.getPersianYear());
+		if (selectedYear > maxYear || selectedYear < minYear) {
+			throw new IllegalArgumentException(String.format("Selected year (%d) must be between minYear(%d) and maxYear(%d)", selectedYear, minYear, maxYear));
+		}
+		yearNumberPicker.setValue(selectedYear);
+		yearNumberPicker.setOnValueChangedListener(dateChangeListener);
+
+		/*
+		 * initializng monthNumberPicker
+		 */
+		boolean displayMonthNames = a.getBoolean(R.styleable.PersianDatePicker_displayMonthNames, false);
+		monthNumberPicker.setMinValue(1);
+		monthNumberPicker.setMaxValue(12);
+		if (displayMonthNames) {
+			monthNumberPicker.setDisplayedValues(PersianCalendarConstants.persianMonthNames);
+		}
+		int selectedMonth = a.getInteger(R.styleable.PersianDatePicker_selectedMonth, pCalendar.getPersianMonth());
+		if (selectedMonth < 1 || selectedMonth > 12) {
+			throw new IllegalArgumentException(String.format("Selected month (%d) must be between 1 and 12", selectedMonth));
+		}
+		monthNumberPicker.setValue(selectedMonth);
+		monthNumberPicker.setOnValueChangedListener(dateChangeListener);
+
+		/*
+		 * initializiing dayNumberPicker
+		 */
+		dayNumberPicker.setMinValue(1);
+		dayNumberPicker.setMaxValue(31);
+		int selectedDay = a.getInteger(R.styleable.PersianDatePicker_selectedDay, pCalendar.getPersianDay());
+		if (selectedDay > 31 || selectedDay < 1) {
+			throw new IllegalArgumentException(String.format("Selected day (%d) must be between 1 and 31", selectedDay));
+		}
+		if (selectedMonth > 6 && selectedMonth < 12 && selectedDay == 31) {
+			selectedDay = 30;
+		} else {
+			boolean isLeapYear = PersianCalendarUtils.isPersianLeapYear(selectedYear);
+			if (isLeapYear && selectedDay == 31) {
+				selectedDay = 30;
+			} else if (selectedDay > 29) {
+				selectedDay = 29;
+			}
+		}
+		dayNumberPicker.setValue(selectedDay);
+		dayNumberPicker.setOnValueChangedListener(dateChangeListener);
+		
+		/*
+		 * displayDescription
+		 */
+		displayDescription = a.getBoolean(R.styleable.PersianDatePicker_displayDescription, false);
+		if( displayDescription ) {
+			descriptionTextView.setVisibility(View.VISIBLE);
+		}
+		
+		a.recycle();
+	}
+
+	NumberPicker.OnValueChangeListener dateChangeListener = new NumberPicker.OnValueChangeListener() {
+		@Override
+		public void onValueChange(NumberPicker picker, int oldVal, int newVal) {
+			int year = yearNumberPicker.getValue();
+			boolean isLeapYear = PersianCalendarUtils.isPersianLeapYear(year);
+			int month = monthNumberPicker.getValue();
+			int day = dayNumberPicker.getValue();
+
+			if (month < 7) {
+				dayNumberPicker.setMinValue(1);
+				dayNumberPicker.setMaxValue(31);
+			} else if (month > 6 && month < 12) {
+				if (day == 31) {
+					dayNumberPicker.setValue(30);
+				}
+				dayNumberPicker.setMinValue(1);
+				dayNumberPicker.setMaxValue(30);
+			} else if (month == 12) {
+				if (isLeapYear) {
+					if (day == 31) {
+						dayNumberPicker.setValue(30);
+					}
+					dayNumberPicker.setMinValue(1);
+					dayNumberPicker.setMaxValue(30);
+				} else {
+					if (day > 29) {
+						dayNumberPicker.setValue(29);
+					}
+					dayNumberPicker.setMinValue(1);
+					dayNumberPicker.setMaxValue(29);
+				}
+			}
+			
+			// Set description
+			if( displayDescription ) {
+				descriptionTextView.setText(getDisplayPersianDate().getPersianLongDate());
+			}
+			
+            if (mListener != null) {
+                mListener.onDateChanged(yearNumberPicker.getValue(), monthNumberPicker.getValue(),
+                        dayNumberPicker.getValue());
+            }
+			date=yearNumberPicker.getValue()+"/"+monthNumberPicker.getValue()+"/"+dayNumberPicker.getValue();
+		}
+	};
+
+	public String getDate() {
+		if(date.equals("")){
+
+
+
+			date=yearNumberPicker.getValue()+"/"+ monthNumberPicker.getValue()+"/"+ dayNumberPicker.getValue();
+		}
+
+		return date;
+	}
+
+	public void setOnDateChangedListener(OnDateChangedListener onDateChangedListener) {
+        mListener = onDateChangedListener;
+    }
+
+	/*@Override
+	public void onValueChange(NumberPicker picker, int oldVal, int newVal) {
+
+	}*/
+
+	/**
+     * The callback used to indicate the user changed the date.
+	 * A class that wants to be notified when the date of PersianDatePicker
+	 * changes should implement this interface and register itself as the
+	 * listener of date change events using the PersianDataPicker's
+	 * setOnDateChangedListener method.
+     */
+    public interface OnDateChangedListener {
+
+        /**
+         * Called upon a date change.
+         *
+         * @param newYear  The year that was set.
+         * @param newMonth The month that was set (1-12)
+         * @param newDay   The day of the month that was set.
+         */
+        void onDateChanged(int newYear, int newMonth, int newDay);
+    }
+
+	public Date getDisplayDate() {
+		PersianCalendar displayPersianDate = new PersianCalendar();
+		displayPersianDate.setPersianDate(yearNumberPicker.getValue(), monthNumberPicker.getValue(), dayNumberPicker.getValue());
+		return displayPersianDate.getTime();
+	}
+
+	public void setDisplayDate(Date displayDate) {
+		setDisplayPersianDate(new PersianCalendar(displayDate.getTime()));
+	}
+
+	public PersianCalendar getDisplayPersianDate() {
+		PersianCalendar displayPersianDate = new PersianCalendar();
+		displayPersianDate.setPersianDate(yearNumberPicker.getValue(), monthNumberPicker.getValue(), dayNumberPicker.getValue());
+		return displayPersianDate;
+	}
+
+	public void setDisplayPersianDate(PersianCalendar displayPersianDate) {
+		int year = displayPersianDate.getPersianYear();
+		int month = displayPersianDate.getPersianMonth();
+		int day = displayPersianDate.getPersianDay();
+		if (month > 6 && month < 12 && day == 31) {
+			day = 30;
+		} else {
+			boolean isLeapYear = PersianCalendarUtils.isPersianLeapYear(year);
+			if (isLeapYear && day == 31) {
+				day = 30;
+			} else if (day > 29) {
+				day = 29;
+			}
+		}
+		dayNumberPicker.setValue(day);
+
+		minYear = year - yearRange;
+		maxYear = year + yearRange;
+		yearNumberPicker.setMinValue(minYear);
+		yearNumberPicker.setMaxValue(maxYear);
+
+		yearNumberPicker.setValue(year);
+		monthNumberPicker.setValue(month);
+		dayNumberPicker.setValue(day);
+	}
+
+	@Override
+	protected Parcelable onSaveInstanceState() {
+		// begin boilerplate code that allows parent classes to save state
+		Parcelable superState = super.onSaveInstanceState();
+		SavedState ss = new SavedState(superState);
+		// end
+
+		ss.datetime = this.getDisplayDate().getTime();
+		return ss;
+	}
+
+	@Override
+	protected void onRestoreInstanceState(Parcelable state) {
+		// begin boilerplate code so parent classes can restore state
+		if (!(state instanceof SavedState)) {
+			super.onRestoreInstanceState(state);
+			return;
+		}
+
+		SavedState ss = (SavedState) state;
+		super.onRestoreInstanceState(ss.getSuperState());
+		// end
+
+		setDisplayDate(new Date(ss.datetime));
+	}
+
+	static class SavedState extends BaseSavedState {
+		long datetime;
+
+		SavedState(Parcelable superState) {
+			super(superState);
+		}
+
+		private SavedState(Parcel in) {
+			super(in);
+			this.datetime = in.readLong();
+		}
+
+		@Override
+		public void writeToParcel(Parcel out, int flags) {
+			super.writeToParcel(out, flags);
+			out.writeLong(this.datetime);
+		}
+
+		// required field that makes Parcelables from a Parcel
+		public static final Creator<SavedState> CREATOR = new Creator<SavedState>() {
+			@Override
+			public SavedState createFromParcel(Parcel in) {
+				return new SavedState(in);
+			}
+
+			@Override
+			public SavedState[] newArray(int size) {
+				return new SavedState[size];
+			}
+		};
+	}
+	private void setDividerColor(NumberPicker picker) {
+		Field[] numberPickerFields = NumberPicker.class.getDeclaredFields();
+		for (Field field : numberPickerFields) {
+			if (field.getName().equals("mSelectionDivider")) {
+				field.setAccessible(true);
+				try {
+					field.set(picker, getResources().getDrawable(R.drawable.customdivider));
+				} catch (IllegalArgumentException e) {
+					e.printStackTrace();
+				} catch (Resources.NotFoundException e) {
+					e.printStackTrace();
+				} catch (IllegalAccessException e) {
+					e.printStackTrace();
+				}
+				break;
+			}
+		}
+	}
+	public static boolean setNumberPickerTextColor(NumberPicker numberPicker, int color)
+	{
+		final int count = numberPicker.getChildCount();
+		for(int i = 0; i < count; i++){
+			View child = numberPicker.getChildAt(i);
+			if(child instanceof EditText){
+				try{
+					Field selectorWheelPaintField = numberPicker.getClass()
+							.getDeclaredField("mSelectorWheelPaint");
+					selectorWheelPaintField.setAccessible(true);
+					((Paint)selectorWheelPaintField.get(numberPicker)).setColor(color);
+					((EditText)child).setTextColor(color);
+					numberPicker.invalidate();
+					return true;
+				}
+				catch(NoSuchFieldException e){
+				}
+				catch(IllegalAccessException e){
+				}
+				catch(IllegalArgumentException e){
+				}
+			}
+		}
+		return false;
+	}}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectModuleManager\">\n    <modules>\n      <module fileurl=\"file://$PROJECT_DIR$/EligashtAndroidApp.iml\" filepath=\"$PROJECT_DIR$/EligashtAndroidApp.iml\" />\n      <module fileurl=\"file://$PROJECT_DIR$/app/app.iml\" filepath=\"$PROJECT_DIR$/app/app.iml\" />\n    </modules>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ .idea/modules.xml	(revision )
@@ -4,6 +4,8 @@
     <modules>
       <module fileurl="file://$PROJECT_DIR$/EligashtAndroidApp.iml" filepath="$PROJECT_DIR$/EligashtAndroidApp.iml" />
       <module fileurl="file://$PROJECT_DIR$/app/app.iml" filepath="$PROJECT_DIR$/app/app.iml" />
+      <module fileurl="file://$PROJECT_DIR$/materialdatetimepicker/materialdatetimepicker.iml" filepath="$PROJECT_DIR$/materialdatetimepicker/materialdatetimepicker.iml" />
+      <module fileurl="file://$PROJECT_DIR$/persianmaterialdatetimepicker/persianmaterialdatetimepicker.iml" filepath="$PROJECT_DIR$/persianmaterialdatetimepicker/persianmaterialdatetimepicker.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 26\n    defaultConfig {\n        applicationId \"com.reserv.myapplicationeli\"\n        minSdkVersion 15\n        targetSdkVersion 26\n        versionCode 1\n        versionName \"1.0\"\n     //   testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n        multiDexEnabled true\n\n    }\n\n    dexOptions {\n\n        jumboMode true\n        javaMaxHeapSize \"4g\"\n\n    }\n\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(include: ['*.jar'], dir: 'libs')\n    implementation 'com.android.support:appcompat-v7:26.1.0'\n    compile 'com.android.support:design:26.1.0'\n    compile 'com.android.support:cardview-v7:26.1.0'\n    compile 'com.ogaclejapan.smarttablayout:library:1.6.1@aar'\n    compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'\n\n\n    implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n    testCompile 'junit:junit:4.12'\n\n    //compile 'com.google.android.gms:play-services:9.0.0'\n    // compile 'com.google.android.gms:play-services:9.0.0'\n    compile 'org.jbundle.util.osgi.wrapped:org.jbundle.util.osgi.wrapped.org.apache.http.client:4.1.2'\n   // compile 'com.android.support:multidex:1.0.0'\n    compile 'com.squareup.retrofit2:retrofit:2.3.0'\n    compile 'com.squareup.retrofit2:converter-gson:2.0.2'\n    // compile 'com.jakewharton:butterknife:8.8.1'\n    compile 'com.squareup:otto:1.3.8'\n    compile 'com.pixplicity.easyprefs:library:1.9.0'\n    /*   compile 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'*/\n    // compile 'com.michaelpardo:activeandroid:3.1.0-SNAPSHOT'\n    compile 'com.android.support:design:25.0.1'\n    compile 'com.squareup.okhttp3:logging-interceptor:3.4.0'\n    compile 'com.wang.avi:library:2.1.3'\n    compile 'com.daimajia.easing:library:2.0@aar'\n    compile 'com.daimajia.androidanimations:library:2.3@aar'\n\n    // NOTE: Do not place your application dependencies here; they belong\n    // in the individual module build.gradle files\n    compile 'uk.co.chrisjenx:calligraphy:2.2.0'\n    compile 'com.github.medyo:fancybuttons:1.8.1'\n    compile 'com.alirezaafkar:toolbar:1.1.2'\n    implementation files('src/main/java/libs/jtds-1.2.8.jar')\n    implementation files('src/main/java/libs/org.apache.commons.io.jar')\n    implementation files('src/main/java/libs/library.jar')\n    implementation files('src/main/java/libs/achartengine-1.1.0.jar')\n\n    implementation files('src/main/java/libs/commons-net-3.2-ftp.jar')\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ app/build.gradle	(revision )
@@ -31,6 +31,9 @@
 
 dependencies {
     implementation fileTree(include: ['*.jar'], dir: 'libs')
+    compile project(':materialdatetimepicker')
+    compile project(':persianmaterialdatetimepicker')
+
     implementation 'com.android.support:appcompat-v7:26.1.0'
     compile 'com.android.support:design:26.1.0'
     compile 'com.android.support:cardview-v7:26.1.0'
@@ -69,4 +72,6 @@
     implementation files('src/main/java/libs/achartengine-1.1.0.jar')
 
     implementation files('src/main/java/libs/commons-net-3.2-ftp.jar')
+    implementation 'com.github.samanzamani.persiandate:PersianDate:0.1'
+
 }
Index: app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/CalendarTool.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/CalendarTool.java	(revision )
+++ app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/CalendarTool.java	(revision )
@@ -0,0 +1,538 @@
+package com.reserv.myapplicationeli.tools.persian.Calendar;
+
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
+
+public class CalendarTool {
+
+    /**
+     * JavaSource_Calendar:
+     * The default constructor uses the current Gregorian date to initialize the
+     * other private memebers of the class (Iranian and Julian dates).
+     */
+    public CalendarTool()
+    {
+        Calendar calendar = new GregorianCalendar();
+        setGregorianDate(calendar.get(Calendar.YEAR),
+                calendar.get(Calendar.MONTH)+1,
+                calendar.get(Calendar.DAY_OF_MONTH));
+    }
+
+    /**
+     * JavaSource_Calendar:
+     * This constructor receives a Gregorian date and initializes the other private
+     * members of the class accordingly.
+     * @param year int
+     * @param month int
+     * @param day int
+     */
+    public CalendarTool(int year, int month, int day)
+    {
+        setGregorianDate(year,month,day);
+    }
+
+    /**
+     * getIranianYear:
+     * Returns the 'year' part of the Iranian date.
+     * @return int
+     */
+    public int getIranianYear() {
+        return irYear;
+    }
+
+    /**
+     * getIranianMonth:
+     * Returns the 'month' part of the Iranian date.
+     * @return int
+     */
+    public int getIranianMonth() {
+        return irMonth;
+    }
+
+    /**
+     * getIranianDay:
+     * Returns the 'day' part of the Iranian date.
+     * @return int
+     */
+    public int getIranianDay() {
+        return irDay;
+    }
+
+    /**
+     * getGregorianYear:
+     * Returns the 'year' part of the Gregorian date.
+     * @return int
+     */
+    public int getGregorianYear() {
+        return gYear;
+    }
+
+    /**
+     * getGregorianMonth:
+     * Returns the 'month' part of the Gregorian date.
+     * @return int
+     */
+    public int getGregorianMonth() {
+        return gMonth;
+    }
+
+    /**
+     * getGregorianDay:
+     * Returns the 'day' part of the Gregorian date.
+     * @return int
+     */
+    public int getGregorianDay() {
+        return gDay;
+    }
+
+    /**
+     * getJulianYear:
+     * Returns the 'year' part of the Julian date.
+     * @return int
+     */
+    public int getJulianYear() {
+        return juYear;
+    }
+
+    /**
+     * getJulianMonth:
+     * Returns the 'month' part of the Julian date.
+     * @return int
+     */
+    public int getJulianMonth() {
+        return juMonth;
+    }
+
+    /**
+     * getJulianDay()
+     * Returns the 'day' part of the Julian date.
+     * @return int
+     */
+    public int getJulianDay() {
+        return juDay;
+    }
+
+    /**
+     * getIranianDate:
+     * Returns a string version of Iranian date
+     * @return String
+     */
+    public String getIranianDate()
+    {
+        return (irYear+"/"+irMonth+"/"+irDay);
+    }
+
+    /**
+     * getGregorianDate:
+     * Returns a string version of Gregorian date
+     * @return String
+     */
+    public String getGregorianDate()
+    {
+        return (gYear+"/"+gMonth+"/"+gDay);
+    }
+
+    /**
+     * getJulianDate:
+     * Returns a string version of Julian date
+     * @return String
+     */
+    public String getJulianDate()
+    {
+        return (juYear+"/"+juMonth+"/"+juDay);
+    }
+
+    /**
+     * getWeekDayStr:
+     * Returns the week day name.
+     * @return String
+     */
+    public String getWeekDayStr()
+    {
+        String weekDayStr[]={
+                "Monday",
+                "Tuesday",
+                "Wednesday",
+                "Thursday",
+                "Friday",
+                "Saturday",
+                "Sunday"};
+        return (weekDayStr[getDayOfWeek()]);
+    }
+
+    /**
+     * toString:
+     * Overrides the default toString() method to return all dates.
+     * @return String
+     */
+    public String toString()
+    {
+        return (getWeekDayStr()+
+                ", Gregorian:["+getGregorianDate()+
+                "], Julian:["+getJulianDate()+
+                "], Iranian:["+getIranianDate()+"]");
+    }
+
+
+    /**
+     * getDayOfWeek:
+     * Returns the week day number. Monday=0..Sunday=6;
+     * @return int
+     */
+    public int getDayOfWeek()
+    {
+        return (JDN % 7);
+    }
+
+    /**
+     * nextDay:
+     * Go to next julian day number (JDN) and adjusts the other dates.
+     */
+    public void nextDay()
+    {
+        JDN++;
+        JDNToIranian();
+        JDNToJulian();
+        JDNToGregorian();
+    }
+    /**
+     * nextDay:
+     * Overload the nextDay() method to accept the number of days to go ahead and
+     * adjusts the other dates accordingly.
+     * @param days int
+     */
+    public void nextDay(int days)
+    {
+        JDN+=days;
+        JDNToIranian();
+        JDNToJulian();
+        JDNToGregorian();
+    }
+
+    /**
+     * previousDay:
+     * Go to previous julian day number (JDN) and adjusts the otehr dates.
+     */
+    public void previousDay()
+    {
+        JDN--;
+        JDNToIranian();
+        JDNToJulian();
+        JDNToGregorian();
+    }
+
+    /**
+     * previousDay:
+     * Overload the previousDay() method to accept the number of days to go backward
+     * and adjusts the other dates accordingly.
+     * @param days int
+     */
+    public void previousDay(int days)
+    {
+        JDN-=days;
+        JDNToIranian();
+        JDNToJulian();
+        JDNToGregorian();
+    }
+
+    /**
+     * setIranianDate:
+     * Sets the date according to the Iranian calendar and adjusts the other dates.
+     * @param year int
+     * @param month int
+     * @param day int
+     */
+    public void setIranianDate(int year, int month, int day)
+    {
+        irYear =year;
+        irMonth = month;
+        irDay = day;
+        JDN = IranianDateToJDN();
+        JDNToIranian();
+        JDNToJulian();
+        JDNToGregorian();
+    }
+
+    /**
+     * setGregorianDate:
+     * Sets the date according to the Gregorian calendar and adjusts the other dates.
+     * @param year int
+     * @param month int
+     * @param day int
+     */
+    public void setGregorianDate(int year, int month, int day)
+    {
+        gYear = year;
+        gMonth = month;
+        gDay = day;
+        JDN = gregorianDateToJDN(year,month,day);
+        JDNToIranian();
+        JDNToJulian();
+        JDNToGregorian();
+    }
+
+    /**
+     * setJulianDate:
+     * Sets the date according to the Julian calendar and adjusts the other dates.
+     * @param year int
+     * @param month int
+     * @param day int
+     */
+    public void setJulianDate(int year, int month, int day)
+    {
+        juYear = year;
+        juMonth = month;
+        juDay = day;
+        JDN = julianDateToJDN(year,month,day);
+        JDNToIranian();
+        JDNToJulian();
+        JDNToGregorian();
+    }
+
+    /**
+     * IranianCalendar:
+     * This method determines if the Iranian (Jalali) year is leap (366-day long)
+     * or is the common year (365 days), and finds the day in March (Gregorian
+     * Calendar)of the first day of the Iranian year ('irYear').Iranian year (irYear)
+     * ranges from (-61 to 3177).This method will set the following private data
+     * members as follows:
+     * leap: Number of years since the last leap year (0 to 4)
+     * Gy: Gregorian year of the begining of Iranian year
+     * march: The March day of Farvardin the 1st (first day of jaYear)
+     */
+    private void IranianCalendar()
+    {
+        // Iranian years starting the 33-year rule
+        int Breaks[]=
+                {-61, 9, 38, 199, 426, 686, 756, 818,1111,1181,
+                        1210,1635,2060,2097,2192,2262,2324,2394,2456,3178} ;
+        int jm,N,leapJ,leapG,jp,j,jump;
+        gYear = irYear + 621;
+        leapJ = -14;
+        jp = Breaks[0];
+        // Find the limiting years for the Iranian year 'irYear'
+        j=1;
+        do{
+            jm=Breaks[j];
+            jump = jm-jp;
+            if (irYear >= jm)
+            {
+                leapJ += (jump / 33 * 8 + (jump % 33) / 4);
+                jp = jm;
+            }
+            j++;
+        } while ((j<20) && (irYear >= jm));
+        N = irYear - jp;
+        // Find the number of leap years from AD 621 to the begining of the current
+        // Iranian year in the Iranian (Jalali) calendar
+        leapJ += (N/33 * 8 + ((N % 33) +3)/4);
+        if ( ((jump % 33) == 4 ) && ((jump-N)==4))
+            leapJ++;
+        // And the same in the Gregorian date of Farvardin the first
+        leapG = gYear/4 - ((gYear /100 + 1) * 3 / 4) - 150;
+        march = 20 + leapJ - leapG;
+        // Find how many years have passed since the last leap year
+        if ( (jump - N) < 6 )
+            N = N - jump + ((jump + 4)/33 * 33);
+        leap = (((N+1) % 33)-1) % 4;
+        if (leap == -1)
+            leap = 4;
+    }
+
+
+    /**
+     * IsLeap:
+     * This method determines if the Iranian (Jalali) year is leap (366-day long)
+     * or is the common year (365 days), and finds the day in March (Gregorian
+     * Calendar)of the first day of the Iranian year ('irYear').Iranian year (irYear)
+     * ranges from (-61 to 3177).This method will set the following private data
+     * members as follows:
+     * leap: Number of years since the last leap year (0 to 4)
+     * Gy: Gregorian year of the begining of Iranian year
+     * march: The March day of Farvardin the 1st (first day of jaYear)
+     */
+    public boolean IsLeap(int irYear1)
+    {
+        // Iranian years starting the 33-year rule
+        int Breaks[]=
+                {-61, 9, 38, 199, 426, 686, 756, 818,1111,1181,
+                        1210,1635,2060,2097,2192,2262,2324,2394,2456,3178} ;
+        int jm,N,leapJ,leapG,jp,j,jump;
+        gYear = irYear1 + 621;
+        leapJ = -14;
+        jp = Breaks[0];
+        // Find the limiting years for the Iranian year 'irYear'
+        j=1;
+        do{
+            jm=Breaks[j];
+            jump = jm-jp;
+            if (irYear1 >= jm)
+            {
+                leapJ += (jump / 33 * 8 + (jump % 33) / 4);
+                jp = jm;
+            }
+            j++;
+        } while ((j<20) && (irYear1 >= jm));
+        N = irYear1 - jp;
+        // Find the number of leap years from AD 621 to the begining of the current
+        // Iranian year in the Iranian (Jalali) calendar
+        leapJ += (N/33 * 8 + ((N % 33) +3)/4);
+        if ( ((jump % 33) == 4 ) && ((jump-N)==4))
+            leapJ++;
+        // And the same in the Gregorian date of Farvardin the first
+        leapG = gYear/4 - ((gYear /100 + 1) * 3 / 4) - 150;
+        march = 20 + leapJ - leapG;
+        // Find how many years have passed since the last leap year
+        if ( (jump - N) < 6 )
+            N = N - jump + ((jump + 4)/33 * 33);
+        leap = (((N+1) % 33)-1) % 4;
+        if (leap == -1)
+            leap = 4;
+        if (leap==4 || leap==0)
+            return true;
+        else
+            return false;
+
+    }
+
+
+
+    /**
+     * IranianDateToJDN:
+     * Converts a date of the Iranian calendar to the Julian Day Number. It first
+     * invokes the 'IranianCalender' private method to convert the Iranian date to
+     * Gregorian date and then returns the Julian Day Number based on the Gregorian
+     * date. The Iranian date is obtained from 'irYear'(1-3100),'irMonth'(1-12) and
+     * 'irDay'(1-29/31).
+     * @return long (Julian Day Number)
+     */
+    private int IranianDateToJDN()
+    {
+        IranianCalendar();
+        return (gregorianDateToJDN(gYear,3,march)+ (irMonth-1) * 31 - irMonth/7 * (irMonth-7) + irDay -1);
+    }
+
+    /**
+     * JDNToIranian:
+     * Converts the current value of 'JDN' Julian Day Number to a date in the
+     * Iranian calendar. The caller should make sure that the current value of
+     * 'JDN' is set correctly. This method first converts the JDN to Gregorian
+     * calendar and then to Iranian calendar.
+     */
+    private void JDNToIranian()
+    {
+        JDNToGregorian();
+        irYear = gYear - 621;
+        IranianCalendar(); // This invocation will update 'leap' and 'march'
+        int JDN1F = gregorianDateToJDN(gYear,3,march);
+        int k = JDN - JDN1F;
+        if (k >= 0)
+        {
+            if (k <= 185)
+            {
+                irMonth = 1 + k/31;
+                irDay = (k % 31) + 1;
+                return;
+            }
+            else
+                k -= 186;
+        }
+        else
+        {
+            irYear--;
+            k += 179;
+            if (leap == 1)
+                k++;
+        }
+        irMonth = 7 + k/30;
+        irDay = (k % 30) + 1;
+    }
+
+
+    /**
+     * julianDateToJDN:
+     * Calculates the julian day number (JDN) from Julian calendar dates. This
+     * integer number corresponds to the noon of the date (i.e. 12 hours of
+     * Universal Time). This method was tested to be good (valid) since 1 March,
+     * -100100 (of both calendars) up to a few millions (10^6) years into the
+     * future. The algorithm is based on D.A.Hatcher, Q.Jl.R.Astron.Soc. 25(1984),
+     * 53-55 slightly modified by K.M. Borkowski, Post.Astron. 25(1987), 275-279.
+     * @param year int
+     * @param month int
+     * @param day int
+     * @return int
+     */
+    private int julianDateToJDN(int year, int month, int day)
+    {
+        return (year + (month - 8) / 6 + 100100) * 1461/4 + (153 * ((month+9) % 12) + 2)/5 + day - 34840408;
+    }
+
+    /**
+     * JDNToJulian:
+     * Calculates Julian calendar dates from the julian day number (JDN) for the
+     * period since JDN=-34839655 (i.e. the year -100100 of both calendars) to
+     * some millions (10^6) years ahead of the present. The algorithm is based on
+     * D.A. Hatcher, Q.Jl.R.Astron.Soc. 25(1984), 53-55 slightly modified by K.M.
+     * Borkowski, Post.Astron. 25(1987), 275-279).
+     */
+    private void JDNToJulian()
+    {
+        int j= 4 * JDN + 139361631;
+        int i= ((j % 1461)/4) * 5 + 308;
+        juDay = (i % 153) / 5 + 1;
+        juMonth = ((i/153) % 12) + 1;
+        juYear = j/1461 - 100100 + (8-juMonth)/6;
+    }
+
+    /**
+     * gergorianDateToJDN:
+     * Calculates the julian day number (JDN) from Gregorian calendar dates. This
+     * integer number corresponds to the noon of the date (i.e. 12 hours of
+     * Universal Time). This method was tested to be good (valid) since 1 March,
+     * -100100 (of both calendars) up to a few millions (10^6) years into the
+     * future. The algorithm is based on D.A.Hatcher, Q.Jl.R.Astron.Soc. 25(1984),
+     * 53-55 slightly modified by K.M. Borkowski, Post.Astron. 25(1987), 275-279.
+     * @param year int
+     * @param month int
+     * @param day int
+     * @return int
+     */
+    private int gregorianDateToJDN(int year, int month, int day)
+    {
+        int jdn = (year + (month - 8) / 6 + 100100) * 1461/4 + (153 * ((month+9) % 12) + 2)/5 + day - 34840408;
+        jdn = jdn - (year + 100100+(month-8)/6)/100*3/4+752;
+        return (jdn);
+    }
+    /**
+     * JDNToGregorian:
+     * Calculates Gregorian calendar dates from the julian day number (JDN) for
+     * the period since JDN=-34839655 (i.e. the year -100100 of both calendars) to
+     * some millions (10^6) years ahead of the present. The algorithm is based on
+     * D.A. Hatcher, Q.Jl.R.Astron.Soc. 25(1984), 53-55 slightly modified by K.M.
+     * Borkowski, Post.Astron. 25(1987), 275-279).
+     */
+    private void JDNToGregorian()
+    {
+        int j= 4 * JDN + 139361631;
+        j = j + (((((4* JDN +183187720)/146097)*3)/4)*4-3908);
+        int i= ((j % 1461)/4) * 5 + 308;
+        gDay = (i % 153) / 5 + 1;
+        gMonth = ((i/153) % 12) + 1;
+        gYear = j/1461 - 100100 + (8-gMonth)/6;
+    }
+
+
+    private int irYear; // Year part of a Iranian date
+    private int irMonth; // Month part of a Iranian date
+    private int irDay; // Day part of a Iranian date
+    private int gYear; // Year part of a Gregorian date
+    private int gMonth; // Month part of a Gregorian date
+    private int gDay; // Day part of a Gregorian date
+    private int juYear; // Year part of a Julian date
+    private int juMonth; // Month part of a Julian date
+    private int juDay; // Day part of a Julian date
+    private int leap; // Number of years since the last leap year (0 to 4)
+    private int JDN; // Julian Day Number
+    private int march; // The march day of Farvardin the first (First day of jaYear)
+} // End of Class 'JavaSource_Calendar
\ No newline at end of file
Index: app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianCalendar.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianCalendar.java	(revision )
+++ app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianCalendar.java	(revision )
@@ -0,0 +1,384 @@
+/**
+ * Persian Calendar see: http://code.google.com/p/persian-calendar/
+   Copyright (C) 2012  Mortezaadi@gmail.com
+   PersianCalendar.java
+   
+   Persian Calendar is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.reserv.myapplicationeli.tools.persian.Calendar.persian.util;
+
+import java.util.GregorianCalendar;
+import java.util.TimeZone;
+
+/**
+ * 
+ * <strong> Persian(Shamsi) calendar </strong>
+ * <p>
+ * </p>
+ * <p>
+ * The calendar consists of 12 months, the first six of which are 31 days, the
+ * next five 30 days, and the final month 29 days in a normal year and 30 days
+ * in a leap year.
+ * </p>
+ * <p>
+ * As one of the few calendars designed in the era of accurate positional
+ * astronomy, the Persian calendar uses a very complex leap year structure which
+ * makes it the most accurate solar calendar in use today. Years are grouped
+ * into cycles which begin with four normal years after which every fourth
+ * subsequent year in the cycle is a leap year. Cycles are grouped into grand
+ * cycles of either 128 years (composed of cycles of 29, 33, 33, and 33 years)
+ * or 132 years, containing cycles of of 29, 33, 33, and 37 years. A great grand
+ * cycle is composed of 21 consecutive 128 year grand cycles and a final 132
+ * grand cycle, for a total of 2820 years. The pattern of normal and leap years
+ * which began in 1925 will not repeat until the year 4745!
+ * </p>
+ * </p> Each 2820 year great grand cycle contains 2137 normal years of 365 days
+ * and 683 leap years of 366 days, with the average year length over the great
+ * grand cycle of 365.24219852. So close is this to the actual solar tropical
+ * year of 365.24219878 days that the Persian calendar accumulates an error of
+ * one day only every 3.8 million years. As a purely solar calendar, months are
+ * not synchronized with the phases of the Moon. </p>
+ * <p>
+ * </p>
+ * 
+ * <p>
+ * <strong>PersianCalendar</strong> by extending Default GregorianCalendar
+ * provides capabilities such as:
+ * </p>
+ * <p>
+ * </p>
+ * 
+ * <li>you can set the date in Persian by setPersianDate(persianYear,
+ * persianMonth, persianDay) and get the Gregorian date or vice versa</li>
+ * <p>
+ * </p>
+ * <li>determine is the current date is Leap year in persian calendar or not by
+ * IsPersianLeapYear()</li>
+ * <p>
+ * </p>
+ * <li>getPersian short and long Date String getPersianShortDate() and
+ * getPersianLongDate you also can set delimiter to assign delimiter of returned
+ * dateString</li>
+ * <p>
+ * </p>
+ * <li>Parse string based on assigned delimiter</li>
+ * <p>
+ * </p>
+ * <p>
+ * </p>
+ * <p>
+ * </p>
+ * <p>
+ * <strong> Example </strong>
+ * </p>
+ * <p>
+ * </p>
+ * 
+ * <pre>
+ * {@code
+ *       PersianCalendar persianCal = new PersianCalendar();
+ *       System.out.println(persianCal.getPersianShortDate());
+ *       
+ *       persianCal.set(1982, Calendar.MAY, 22);
+ *       System.out.println(persianCal.getPersianShortDate());
+ *       
+ *       persianCal.setDelimiter(" , ");
+ *       persianCal.parse("1361 , 03 , 01");
+ *       System.out.println(persianCal.getPersianShortDate());
+ *       
+ *       persianCal.setPersianDate(1361, 3, 1);
+ *       System.out.println(persianCal.getPersianLongDate());
+ *       System.out.println(persianCal.getTime());
+ *       
+ *       persianCal.addPersianDate(Calendar.MONTH, 33);
+ *       persianCal.addPersianDate(Calendar.YEAR, 5);
+ *       persianCal.addPersianDate(Calendar.DATE, 50);
+ * 
+ * }
+ * 
+ * <pre>
+ * @author Morteza  contact: <a href="mailto:Mortezaadi@gmail.com">Mortezaadi@gmail.com</a>
+ * @version 1.1
+ */
+public class PersianCalendar extends GregorianCalendar {
+
+	private static final long serialVersionUID = 5541422440580682494L;
+
+	private int persianYear;
+	private int persianMonth;
+	private int persianDay;
+	// use to seperate PersianDate's field and also Parse the DateString based
+	// on this delimiter
+	private String delimiter = "/";
+
+	private long convertToMilis(long julianDate) {
+		return PersianCalendarConstants.MILLIS_JULIAN_EPOCH + julianDate * PersianCalendarConstants.MILLIS_OF_A_DAY
+				+ PersianCalendarUtils.ceil(getTimeInMillis() - PersianCalendarConstants.MILLIS_JULIAN_EPOCH, PersianCalendarConstants.MILLIS_OF_A_DAY);
+	}
+
+	/**
+	 * default constructor
+	 * 
+	 * most of the time we don't care about TimeZone when we persisting Date or
+	 * doing some calculation on date. <strong> Default TimeZone was set to
+	 * "GMT" </strong> in order to make developer to work more convenient with
+	 * the library; however you can change the TimeZone as you do in
+	 * GregorianCalendar by calling setTimeZone()
+	 */
+	public PersianCalendar(long millis) {
+		setTimeInMillis(millis);
+	}
+
+	/**
+	 * default constructor
+	 * 
+	 * most of the time we don't care about TimeZone when we persisting Date or
+	 * doing some calculation on date. <strong> Default TimeZone was set to
+	 * "GMT" </strong> in order to make developer to work more convenient with
+	 * the library; however you can change the TimeZone as you do in
+	 * GregorianCalendar by calling setTimeZone()
+	 */
+	public PersianCalendar() {
+		setTimeZone(TimeZone.getTimeZone("GMT"));
+	}
+
+	/**
+	 * Calculate persian date from current Date and populates the corresponding
+	 * fields(persianYear, persianMonth, persianDay)
+	 */
+	protected void calculatePersianDate() {
+		long julianDate = ((long) Math.floor((getTimeInMillis() - PersianCalendarConstants.MILLIS_JULIAN_EPOCH)) / PersianCalendarConstants.MILLIS_OF_A_DAY);
+		long PersianRowDate = PersianCalendarUtils.julianToPersian(julianDate);
+		long year = PersianRowDate >> 16;
+		int month = (int) (PersianRowDate & 0xff00) >> 8;
+		int day = (int) (PersianRowDate & 0xff);
+		this.persianYear = (int) (year > 0 ? year : year - 1);
+		this.persianMonth = month;
+		this.persianDay = day;
+	}
+
+	/**
+	 * 
+	 * Determines if the given year is a leap year in persian calendar. Returns
+	 * true if the given year is a leap year.
+	 * 
+	 * @return boolean
+	 */
+	public boolean isPersianLeapYear() {
+		// calculatePersianDate();
+		return PersianCalendarUtils.isPersianLeapYear(this.persianYear);
+	}
+
+	/**
+	 * set the persian date it converts PersianDate to the Julian and assigned
+	 * equivalent milliseconds to the instance
+	 * 
+	 * @param persianYear
+	 * @param persianMonth
+	 * @param persianDay
+	 */
+	public void setPersianDate(int persianYear, int persianMonth, int persianDay) {
+		this.persianYear = persianYear;
+		this.persianMonth = persianMonth;
+		this.persianDay = persianDay;
+		setTimeInMillis(convertToMilis(PersianCalendarUtils.persianToJulian(this.persianYear > 0 ? this.persianYear : this.persianYear + 1, this.persianMonth - 1, this.persianDay)));
+	}
+
+	public int getPersianYear() {
+		// calculatePersianDate();
+		return this.persianYear;
+	}
+
+	/**
+	 * 
+	 * @return int persian month number
+	 */
+	public int getPersianMonth() {
+		// calculatePersianDate();
+		return this.persianMonth + 1;
+	}
+
+	/**
+	 * 
+	 * @return String persian month name
+	 */
+	public String getPersianMonthName() {
+		// calculatePersianDate();
+		return PersianCalendarConstants.persianMonthNames[this.persianMonth];
+	}
+
+	/**
+	 * 
+	 * @return int Persian day in month
+	 */
+	public int getPersianDay() {
+		// calculatePersianDate();
+		return this.persianDay;
+	}
+
+	/**
+	 * 
+	 * @return String Name of the day in week
+	 */
+	public String getPersianWeekDayName() {
+		switch (get(DAY_OF_WEEK)) {
+		case SATURDAY:
+			return PersianCalendarConstants.persianWeekDays[0];
+		case SUNDAY:
+			return PersianCalendarConstants.persianWeekDays[1];
+		case MONDAY:
+			return PersianCalendarConstants.persianWeekDays[2];
+		case TUESDAY:
+			return PersianCalendarConstants.persianWeekDays[3];
+		case WEDNESDAY:
+			return PersianCalendarConstants.persianWeekDays[4];
+		case THURSDAY:
+			return PersianCalendarConstants.persianWeekDays[5];
+		default:
+			return PersianCalendarConstants.persianWeekDays[6];
+		}
+
+	}
+
+	/**
+	 * 
+	 * @return String of Persian Date ex: شنبه 01 خرداد 1361
+	 */
+	public String getPersianLongDate() {
+		return getPersianWeekDayName() + "  " + this.persianDay + "  " + getPersianMonthName() + "  " + this.persianYear;
+	}
+
+	public String getPersianLongDateAndTime() {
+		return getPersianLongDate() + " ساعت " + get(HOUR_OF_DAY) + ":" + get(MINUTE) + ":" + get(SECOND);
+	}
+
+	/**
+	 * 
+	 * @return String of persian date formatted by
+	 *         'YYYY[delimiter]mm[delimiter]dd' default delimiter is '/'
+	 */
+	public String getPersianShortDate() {
+		// calculatePersianDate();
+		return "" + formatToMilitary(this.persianYear) + delimiter + formatToMilitary(getPersianMonth()) + delimiter + formatToMilitary(this.persianDay);
+	}
+
+	public String getPersianShortDateTime() {
+		return "" + formatToMilitary(this.persianYear) + delimiter + formatToMilitary(getPersianMonth()) + delimiter + formatToMilitary(this.persianDay) + " " + formatToMilitary(this.get(HOUR_OF_DAY)) + ":" + formatToMilitary(get(MINUTE))
+				+ ":" + formatToMilitary(get(SECOND));
+	}
+
+	private String formatToMilitary(int i) {
+		return (i < 9) ? "0" + i : String.valueOf(i);
+	}
+
+	/**
+	 * add specific amout of fields to the current date for now doesnt handle
+	 * before 1 farvardin hejri (before epoch)
+	 * 
+	 * @param field
+	 * @param amount
+	 *            <pre>
+	 *  Usage:
+	 *  {@code
+	 *  addPersianDate(Calendar.YEAR, 2);
+	 *  addPersianDate(Calendar.MONTH, 3);
+	 *  }
+	 * </pre>
+	 * 
+	 *            u can also use Calendar.HOUR_OF_DAY,Calendar.MINUTE,
+	 *            Calendar.SECOND, Calendar.MILLISECOND etc
+	 */
+	//
+	public void addPersianDate(int field, int amount) {
+		if (amount == 0) {
+			return; // Do nothing!
+		}
+
+		if (field < 0 || field >= ZONE_OFFSET) {
+			throw new IllegalArgumentException();
+		}
+
+		if (field == YEAR) {
+			setPersianDate(this.persianYear + amount, getPersianMonth(), this.persianDay);
+			return;
+		} else if (field == MONTH) {
+			setPersianDate(this.persianYear + ((getPersianMonth() + amount) / 12), (getPersianMonth() + amount) % 12, this.persianDay);
+			return;
+		}
+		add(field, amount);
+		calculatePersianDate();
+	}
+
+	/**
+	 * <pre>
+	 *    use <code>{@link PersianDateParser}</code> to parse string 
+	 *    and get the Persian Date.
+	 * </pre>
+	 * 
+	 * @see PersianDateParser
+	 * @param dateString
+	 */
+	public void parse(String dateString) {
+		PersianCalendar p = new PersianDateParser(dateString, delimiter).getPersianDate();
+		setPersianDate(p.getPersianYear(), p.getPersianMonth(), p.getPersianDay());
+	}
+
+	public String getDelimiter() {
+		return delimiter;
+	}
+
+	/**
+	 * assign delimiter to use as a separator of date fields.
+	 * 
+	 * @param delimiter
+	 */
+	public void setDelimiter(String delimiter) {
+		this.delimiter = delimiter;
+	}
+
+	@Override
+	public String toString() {
+		String str = super.toString();
+		return str.substring(0, str.length() - 1) + ",PersianDate=" + getPersianShortDate() + "]";
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		return super.equals(obj);
+
+	}
+
+	@Override
+	public int hashCode() {
+		return super.hashCode();
+	}
+
+	@Override
+	public void set(int field, int value) {
+		super.set(field, value);
+		calculatePersianDate();
+	}
+
+	@Override
+	public void setTimeInMillis(long millis) {
+		super.setTimeInMillis(millis);
+		calculatePersianDate();
+	}
+
+	@Override
+	public void setTimeZone(TimeZone zone) {
+		super.setTimeZone(zone);
+		calculatePersianDate();
+	}
+}
Index: app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianCalendarConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianCalendarConstants.java	(revision )
+++ app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianCalendarConstants.java	(revision )
@@ -0,0 +1,64 @@
+/**
+ * Persian Calendar see: http://code.google.com/p/persian-calendar/
+   Copyright (C) 2012  Mortezaadi@gmail.com
+   PersianCalendarConstants.java
+   
+   Persian Calendar is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.reserv.myapplicationeli.tools.persian.Calendar.persian.util;
+
+/**
+ * 
+ * @author Morteza contact: <a
+ *         href="mailto:Mortezaadi@gmail.com">Mortezaadi@gmail.com</a>
+ * @version 1.0
+ */
+public class PersianCalendarConstants {
+
+	// 00:00:00 UTC (Gregorian) Julian day 0,
+	// 0 milliseconds since 1970-01-01
+	public static final long MILLIS_JULIAN_EPOCH = -210866803200000L;
+	// Milliseconds of a day calculated by 24L(hours) * 60L(minutes) *
+	// 60L(seconds) * 1000L(mili);
+	public static final long MILLIS_OF_A_DAY = 86400000L;
+
+	/**
+	 * The JDN of 1 Farvardin 1; Equivalent to March 19, 622 A.D.
+	 */
+	public static final long PERSIAN_EPOCH = 1948321;
+
+	public static final String[] persianMonthNames = { "\u0641\u0631\u0648\u0631\u062f\u06cc\u0646", // Farvardin
+			"\u0627\u0631\u062f\u06cc\u200c\u0628\u0647\u0634\u062a", // Ordibehesht
+			"\u062e\u0631\u062f\u0627\u062f", // Khordad
+			"\u062a\u06cc\u0631", // Tir
+			"\u0645\u0631\u062f\u0627\u062f", // Mordad
+			"\u0634\u0647\u0631\u06cc\u0648\u0631", // Shahrivar
+			"\u0645\u0647\u0631", // Mehr
+			"\u0622\u0628\u0627\u0646", // Aban
+			"\u0622\u0630\u0631", // Azar
+			"\u062f\u06cc", // Dey
+			"\u0628\u0647\u0645\u0646", // Bahman
+			"\u0627\u0633\u0641\u0646\u062f" // Esfand
+	};
+
+	public static final String[] persianWeekDays = { "\u0634\u0646\u0628\u0647", // Shanbeh
+			"\u06cc\u06a9\u200c\u0634\u0646\u0628\u0647", // Yekshanbeh
+			"\u062f\u0648\u0634\u0646\u0628\u0647", // Doshanbeh
+			"\u0633\u0647\u200c\u0634\u0646\u0628\u0647", // Sehshanbeh
+			"\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647", // Chaharshanbeh
+			"\u067e\u0646\u062c\u200c\u0634\u0646\u0628\u0647", // Panjshanbeh
+			"\u062c\u0645\u0639\u0647" // jome
+	};
+
+}
Index: app/src/main/res/layout/activity_hotel2.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:card_view=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n\n    <RelativeLayout\n        android:id=\"@+id/citySearch\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"80\">\n\n        <ImageView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:scaleType=\"fitXY\"\n            android:src=\"@drawable/banafsh_jahan\" />\n\n        <ImageView\n            android:id=\"@+id/ivHotel\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\"\n            android:layout_marginBottom=\"30dp\"\n            android:layout_marginRight=\"10dp\"\n            android:layout_marginTop=\"30dp\"\n            android:scaleType=\"fitCenter\"\n            android:src=\"@drawable/hotel_circle_icon\" />\n\n\n        <LinearLayout\n            android:id=\"@+id/linearLayout_mabda\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"150dp\"\n            android:layout_centerInParent=\"true\"\n            android:layout_gravity=\"right\"\n            android:layout_toLeftOf=\"@+id/ivHotel\"\n            android:gravity=\"right\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                android:id=\"@+id/lblProductID\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginBottom=\"10dp\"\n                android:layout_marginRight=\"2dp\"\n                android:gravity=\"right\"\n                android:text=\"سفر به : \"\n                android:textColor=\"#ffffff\"\n                android:textSize=\"15dip\" />\n\n            <TextView\n                android:id=\"@+id/txtCity\"\n                android:layout_width=\"506dp\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginBottom=\"10dp\"\n                android:gravity=\"right\"\n                android:text=\" استانبول \"\n                android:textColor=\"#fff\"\n                android:textSize=\"24dip\"\n                android:textStyle=\"bold\" />\n\n            <TextView\n                android:id=\"@+id/lbl_city_english\"\n                android:layout_width=\"501dp\"\n                android:layout_height=\"wrap_content\"\n                android:gravity=\"right\"\n                android:text=\"Istanbul,Turkey \"\n                android:textColor=\"#fff\"\n                android:textSize=\"14dip\" />\n        </LinearLayout>\n\n\n    </RelativeLayout>\n\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"100\"\n        android:orientation=\"vertical\">\n\n        <android.support.v7.widget.CardView\n            android:id=\"@+id/cvDate\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"100\"\n            android:layout_gravity=\"center\"\n            android:layout_margin=\"10dp\"\n            android:background=\"@color/hotel_detail_background\"\n            card_view:cardBackgroundColor=\"#ffffff\"\n            card_view:cardCornerRadius=\"3dp\"\n            card_view:cardElevation=\"3dp\">\n\n            <LinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"vertical\"\n                android:gravity=\"center\">\n\n                <LinearLayout\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginTop=\"25dp\"\n                    android:orientation=\"horizontal\">\n\n                    <TextView\n                        android:id=\"@+id/tarikh_be\"\n                        android:layout_width=\"0dp\"\n                        android:layout_height=\"match_parent\"\n                        android:layout_weight=\"100\"\n                        android:background=\"#fff\"\n                        android:gravity=\"right\"\n                        android:text=\"تاریخ برگشت \"\n                        android:textColor=\"#808080\"\n                        android:textSize=\"14dp\"\n                        android:textStyle=\"bold\" />\n\n                    <TextView\n                        android:id=\"@+id/tarikh_az\"\n                        android:layout_width=\"0dp\"\n                        android:layout_height=\"match_parent\"\n                        android:layout_marginRight=\"20dp\"\n                        android:layout_weight=\"100\"\n                        android:background=\"#fff\"\n                        android:gravity=\"right\"\n                        android:text=\"تاریخ رفت\"\n                        android:textColor=\"#808080\"\n                        android:textSize=\"14dp\"\n                        android:textStyle=\"bold\" />\n\n                </LinearLayout>\n\n\n                <LinearLayout\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n\n                    android:layout_marginTop=\"10dp\"\n                    android:orientation=\"horizontal\">\n\n                    <LinearLayout\n                        android:layout_width=\"0dp\"\n                        android:layout_height=\"match_parent\"\n                        android:layout_weight=\"100\"\n                        android:orientation=\"horizontal\">\n\n                        <TextView\n                            android:layout_width=\"wrap_content\"\n                            android:layout_height=\"match_parent\"\n                            android:layout_marginLeft=\"5dp\"\n                            android:layout_marginRight=\"10dp\"\n                            android:gravity=\"center\"\n                            android:text=\"10 december\"\n                            android:textColor=\"@color/textColorRDark\"\n                            android:textSize=\"14dp\"\n\n                            />\n\n                        <TextView\n                            android:layout_width=\"wrap_content\"\n                            android:layout_height=\"match_parent\"\n                            android:gravity=\"center\"\n                            android:text=\"@string/icon_calander\"\n                            android:textAppearance=\"@style/IconFonts\"\n                            android:textColor=\"@color/textColorRDark\"\n                            android:textSize=\"25dp\" />\n\n\n                    </LinearLayout>\n\n                    <LinearLayout\n                        android:layout_width=\"0dp\"\n                        android:layout_height=\"match_parent\"\n                        android:layout_marginRight=\"20dp\"\n                        android:layout_weight=\"100\"\n                        android:gravity=\"right\"\n                        android:orientation=\"horizontal\">\n\n                        <TextView\n                            android:layout_width=\"wrap_content\"\n                            android:layout_height=\"match_parent\"\n                            android:layout_marginLeft=\"5dp\"\n                            android:layout_marginRight=\"10dp\"\n                            android:gravity=\"center\"\n                            android:text=\"10 december\"\n                            android:textColor=\"@color/textColorRDark\"\n                            android:textSize=\"14dp\"\n\n                            />\n\n                        <TextView\n                            android:layout_width=\"wrap_content\"\n                            android:layout_height=\"match_parent\"\n                            android:gravity=\"center\"\n                            android:text=\"@string/icon_calander\"\n                            android:textAppearance=\"@style/IconFonts\"\n                            android:textColor=\"@color/textColorRDark\"\n                            android:textSize=\"25dp\" />\n\n\n                    </LinearLayout>\n\n\n                </LinearLayout>\n\n\n            </LinearLayout>\n\n\n        </android.support.v7.widget.CardView>\n        <android.support.v7.widget.CardView\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_weight=\"60\"\n            android:layout_gravity=\"center\"\n            android:layout_margin=\"10dp\"\n            android:background=\"@color/hotel_detail_background\"\n            card_view:cardBackgroundColor=\"#ffffff\"\n            card_view:cardCornerRadius=\"3dp\"\n            card_view:cardElevation=\"3dp\">\n\n            <LinearLayout\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"horizontal\">\n\n                <LinearLayout\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"match_parent\"\n                    android:layout_weight=\"100\"\n                    android:orientation=\"vertical\">\n\n                    <TextView\n                        android:id=\"@+id/textView5\"\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_weight=\"100\"\n                        android:gravity=\"center\"\n                        android:text=\"کودک\" />\n\n                    <TextView\n                        android:id=\"@+id/textView10\"\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_weight=\"100\"\n                        android:gravity=\"center\"\n                        android:text=\"0\" />\n\n                </LinearLayout>\n\n                <View\n                    android:layout_width=\"1dp\"\n                    android:layout_height=\"fill_parent\"\n                    android:layout_marginBottom=\"1dp\"\n                    android:layout_marginTop=\"1dp\"\n                    android:background=\"#a6a6a6\" />\n\n                <LinearLayout\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"match_parent\"\n                    android:layout_weight=\"100\"\n                    android:orientation=\"vertical\">\n\n                    <TextView\n                        android:id=\"@+id/textView6\"\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_weight=\"0.80\"\n                        android:gravity=\"center\"\n                        android:text=\"بزرگسال\" />\n\n                    <TextView\n                        android:id=\"@+id/textView9\"\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_weight=\"0.86\"\n                        android:gravity=\"center\"\n                        android:text=\"1\" />\n\n\n                </LinearLayout>\n\n                <View\n                    android:layout_width=\"1dp\"\n                    android:layout_height=\"fill_parent\"\n                    android:layout_marginBottom=\"1dp\"\n                    android:layout_marginTop=\"1dp\"\n                    android:background=\"#a6a6a6\" />\n\n                <LinearLayout\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"match_parent\"\n                    android:layout_weight=\"100\"\n                    android:orientation=\"vertical\"\n                    android:id=\"@+id/btn_add_room\">\n\n                    <TextView\n                        android:id=\"@+id/lblRoomCount\"\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_marginRight=\"5dp\"\n                        android:layout_weight=\"1\"\n                        android:gravity=\"center\"\n                        android:text=\"اتاق\" />\n\n                    <TextView\n                        android:id=\"@+id/txtRoomCount\"\n                        android:layout_width=\"match_parent\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_weight=\"0.86\"\n                        android:gravity=\"center\"\n                        android:text=\"1\" />\n\n\n                </LinearLayout>\n            </LinearLayout>\n\n        </android.support.v7.widget.CardView>\n        <Button\n            android:id=\"@+id/searchHotel\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"40dp\"\n            android:layout_gravity=\"center\"\n            android:layout_margin=\"25dp\"\n            android:background=\"@drawable/btngravity_big\"\n            android:shadowColor=\"@color/drawer_shadow\"\n            android:shadowDx=\"2\"\n            android:shadowDy=\"2\"\n            android:shadowRadius=\"2\"\n            android:text=\"جستجو هتل\"\n            android:textColor=\"#FFFFFF\"\n            android:textSize=\"16dp\"\n            android:textStyle=\"bold\" />\n    </LinearLayout>\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_hotel2.xml	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ app/src/main/res/layout/activity_hotel2.xml	(revision )
@@ -146,6 +146,8 @@
                         android:orientation="horizontal">
 
                         <TextView
+                            android:id="@+id/tvBargasht"
+
                             android:layout_width="wrap_content"
                             android:layout_height="match_parent"
                             android:layout_marginLeft="5dp"
@@ -178,6 +180,8 @@
                         android:orientation="horizontal">
 
                         <TextView
+                            android:id="@+id/tvRaft"
+
                             android:layout_width="wrap_content"
                             android:layout_height="match_parent"
                             android:layout_marginLeft="5dp"
Index: app/src/main/java/com/reserv/myapplicationeli/views/fragments/hotel/HotelFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.reserv.myapplicationeli.views.fragments.hotel;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.LinearLayout;\nimport android.widget.ListView;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\n\nimport com.pixplicity.easyprefs.library.Prefs;\nimport com.reserv.myapplicationeli.R;\nimport com.reserv.myapplicationeli.models.model.ModelRowCountRoom;\nimport com.reserv.myapplicationeli.views.activities.hotel.activity.GetHotelCityActivity;\nimport com.reserv.myapplicationeli.views.activities.hotel.activity.GetHotelRoomCountActivity;\nimport com.reserv.myapplicationeli.views.adapters.HotelCountRoomAdapter;\nimport com.reserv.myapplicationeli.views.activities.hotel.activity.SelectHotelActivity;\n\n\npublic class HotelFragment extends Fragment implements OnClickListener {\n\tpublic HotelFragment() {\n\t}\n\tpublic static Button searchHotel,btnPlusB,btnMinesB,btnPlusK,btnMinesK,btnPlusN,btnMinesN;\n\tpublic TextView txtCity,lbl_city_english,txtTitle,txtCountB,txtCountK,txtCountN,lblRoomCount,txtRoomCount;\n\tpublic static int countNafar=1;\n\tLinearLayout btn_add_room;\n\tpublic ListView listRoomItem;\n\tHotelCountRoomAdapter mAdapter;\n\tpublic List<ModelRowCountRoom> data;\n\tprivate View rootView;\n\tRelativeLayout citySearch;\n\t@Override\n\tpublic View onCreateView(LayoutInflater inflater, ViewGroup container,\n\t\t\t\t\t\t\t Bundle savedInstanceState) {\n\t\trootView = inflater.inflate(R.layout.activity_hotel2, container, false);\n\n\t//\trootView = inflater.inflate(R.layout.fragment_plane, container, false);\n\t\t\n\n\t\t\n\t\t//listRoomItem = (ListView)rootView.findViewById(R.id.listRoomItem);\n\t\t  \n\t\tlblRoomCount= (TextView) rootView.findViewById(R.id.lblRoomCount);\n\t\tlblRoomCount.setOnClickListener(this);\n\t\ttxtRoomCount= (TextView) rootView.findViewById(R.id.txtRoomCount);\n\t\ttxtRoomCount.setOnClickListener(this);\n\t\t\n\t\tbtn_add_room= (LinearLayout) rootView.findViewById(R.id.btn_add_room);\n\t\tbtn_add_room.setOnClickListener(this);\n\t\t \n\t\ttxtTitle= (TextView) rootView.findViewById(R.id.txtTitle);\n\t\tcitySearch= (RelativeLayout) rootView.findViewById(R.id.citySearch);\n\t\t\n\t\tlbl_city_english= (TextView) rootView.findViewById(R.id.lbl_city_english);\n\t\ttxtCity= (TextView) rootView.findViewById(R.id.txtCity);\n\n\t    \n\t    citySearch.setOnClickListener(this);\n\t    lbl_city_english.setOnClickListener(this);\n\t   \n\t    searchHotel= (Button) rootView.findViewById(R.id.searchHotel);\n\t    searchHotel.setOnClickListener(this);\n        \n\t    \n\t   /* Bundle bundle = getActivity().getIntent().getExtras();\n  \t\tif(bundle != null){\n  \t        if(bundle.getString(\"Value-Hotel-City-Fa\")!= null)\n  \t        {\n  \t        \tcitySearch.setText(\"\"+bundle.getString(\"Value-Hotel-City-Fa\")) ;\n  \t        \tlbl_city_english.setText(\"\"+bundle.getString(\"Value-Hotel-City-En\")) ;\n  \t        }\n          }\n\t    /////////\n\n\t\t//i4.putExtra(\"Value-Hotel-City-Code\",current.getCityCode());\n\t*/\n\t    \n\t     data=new ArrayList<ModelRowCountRoom>();\n\t   // for(int i=0;i<2;i++){\n\t    ModelRowCountRoom model=new ModelRowCountRoom();\n\t    model.setCountB(1);\n\t    model.setCountK(0);\n\t    model.setCountN(0);\n\t   \n         data.add(model);\n\t   // }\n\t    \n        mAdapter = new HotelCountRoomAdapter(getActivity(), data);\n      //mAdapter.setAdapter(mAdapter);\n        mAdapter.setData(data);\n     //   listRoomItem.setAdapter(mAdapter);\n        return rootView;\n\t}//end oncreat\n\n\t@Override\n\tpublic void onResume() {\n\t\tsuper.onResume();\n\n\t\tif(!Prefs.getString(\"Value-Hotel-City-Fa\",\"\").equals(\"\"))\n\t\t{\n\t\t\ttxtCity.setText(Prefs.getString(\"Value-Hotel-City-Fa\",\"\"));\n\t\t\tlbl_city_english.setText(Prefs.getString(\"Value-Hotel-City-En\",\"\")) ;\n\n\t\t}\n\t}\n\n\t@Override\n\tpublic void onDestroyView() {\n\t\tsuper.onDestroyView();\n\n\t\tPrefs.putString(\"Value-Hotel-City-Fa\",\"\");\n\t\tPrefs.putString(\"Value-Hotel-City-En\",\"\");\n\t\tPrefs.putString(\"Value-Hotel-City-Code\",\"\");\n\t}\n\n\tpublic boolean isInRange(int a, int b, int c) {\n\t        return b > a ? c >= a && c <= b : c >= b && c <= a;\n\t }\n\t@Override\n\tpublic void onClick(View v) {\n\t\t// TODO Auto-generated method stub\n\t\tswitch (v.getId()) {\n\t\tcase R.id.lblRoomCount:\n\t\t\tIntent intent2=new Intent(getActivity(),GetHotelRoomCountActivity.class);\n\t\t\tBundle bundle2 = getActivity().getIntent().getExtras();\n      \t\tif(bundle2 != null ){\n      \t\t\tintent2.putExtra(\"Value-Maghsad-City\",  bundle2.getString(\"Value-Maghsad-City\"));\n\t\t\t\tintent2.putExtra(\"Value-Maghsad-Airport\", bundle2.getString(\"Value-Maghsad-Airport\"));\n\t\t\t\tintent2.putExtra(\"Value-Maghsad-Airport-Code\", bundle2.getString(\"Value-Maghsad-Airport-Code\"));//*\n      \t\t}\n\t\t\t\n            startActivityForResult(intent2, 2);\n\t\t\tbreak;\n\t\tcase R.id.txtRoomCount:\n\t\t\tIntent intent4=new Intent(getActivity(),GetHotelRoomCountActivity.class);\n\t\t\tBundle bundle4 = getActivity().getIntent().getExtras();\n      \t\tif(bundle4 != null ){\n      \t\t\tintent4.putExtra(\"Value-Maghsad-City\",  bundle4.getString(\"Value-Maghsad-City\"));\n\t\t\t\tintent4.putExtra(\"Value-Maghsad-Airport\", bundle4.getString(\"Value-Maghsad-Airport\"));\n\t\t\t\tintent4.putExtra(\"Value-Maghsad-Airport-Code\", bundle4.getString(\"Value-Maghsad-Airport-Code\"));//*\n      \t\t}\n\t\t\t\n            startActivityForResult(intent4, 2);\n\t\t\tbreak;\n\t\tcase R.id.citySearch:\n\t\t\tIntent intent5=new Intent(getActivity(),GetHotelCityActivity.class);\n\t\t\tstartActivityForResult(intent5,1);\n\t\t\tbreak;\n\t\tcase R.id.btn_add_room:\n\t\t\tModelRowCountRoom md = new ModelRowCountRoom();  \n\t\t   data.add(md);  \n\t\t   mAdapter.notifyDataSetChanged();  \n\t\t  // editTextView.setText(\"\");\n\t\t   break;\n\t\tcase R.id.searchHotel:\n\t\t\tIntent intent6=new Intent(getActivity(),SelectHotelActivity.class);\n\t\t\tBundle bundle6 = getActivity().getIntent().getExtras();\n      \t\tif(bundle6 != null ){\n      \t\t\tintent6.putExtra(\"Value-Maghsad-City\",  bundle6.getString(\"Value-Maghsad-City\"));\n\t\t\t\tintent6.putExtra(\"Value-Maghsad-Airport\", bundle6.getString(\"Value-Maghsad-Airport\"));\n\t\t\t\tintent6.putExtra(\"Value-Maghsad-Airport-Code\", bundle6.getString(\"Value-Maghsad-Airport-Code\"));//*\n      \t\t}\n\t\t\t\n            startActivityForResult(intent6, 2);\n\t\tbreak;\n\t\t\n\t\n\t\t}\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/views/fragments/hotel/HotelFragment.java	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ app/src/main/java/com/reserv/myapplicationeli/views/fragments/hotel/HotelFragment.java	(revision )
@@ -11,6 +11,7 @@
 import android.view.View.OnClickListener;
 import android.view.ViewGroup;
 import android.widget.Button;
+import android.widget.DatePicker;
 import android.widget.LinearLayout;
 import android.widget.ListView;
 import android.widget.RelativeLayout;
@@ -23,6 +24,7 @@
 import com.reserv.myapplicationeli.views.activities.hotel.activity.GetHotelRoomCountActivity;
 import com.reserv.myapplicationeli.views.adapters.HotelCountRoomAdapter;
 import com.reserv.myapplicationeli.views.activities.hotel.activity.SelectHotelActivity;
+import com.reserv.myapplicationeli.views.ui.dialog.DatePickerDialog;
 
 
 public class HotelFragment extends Fragment implements OnClickListener {
@@ -37,22 +39,28 @@
 	public List<ModelRowCountRoom> data;
 	private View rootView;
 	RelativeLayout citySearch;
+	TextView tvRaft,tvBargasht;
+	DatePickerDialog datePickerDialogRaft,datePickerDialogBargasht;
 	@Override
 	public View onCreateView(LayoutInflater inflater, ViewGroup container,
 							 Bundle savedInstanceState) {
 		rootView = inflater.inflate(R.layout.activity_hotel2, container, false);
 
 	//	rootView = inflater.inflate(R.layout.fragment_plane, container, false);
-		
+
 
-		
+
 		//listRoomItem = (ListView)rootView.findViewById(R.id.listRoomItem);
 		  
 		lblRoomCount= (TextView) rootView.findViewById(R.id.lblRoomCount);
 		lblRoomCount.setOnClickListener(this);
 		txtRoomCount= (TextView) rootView.findViewById(R.id.txtRoomCount);
+		tvRaft= (TextView) rootView.findViewById(R.id.tvRaft);
+		tvBargasht= (TextView) rootView.findViewById(R.id.tvBargasht);
 		txtRoomCount.setOnClickListener(this);
-		
+		tvRaft.setOnClickListener(this);
+		tvBargasht.setOnClickListener(this);
+
 		btn_add_room= (LinearLayout) rootView.findViewById(R.id.btn_add_room);
 		btn_add_room.setOnClickListener(this);
 		 
@@ -69,7 +77,7 @@
 	    searchHotel= (Button) rootView.findViewById(R.id.searchHotel);
 	    searchHotel.setOnClickListener(this);
         
-	    
+
 	   /* Bundle bundle = getActivity().getIntent().getExtras();
   		if(bundle != null){
   	        if(bundle.getString("Value-Hotel-City-Fa")!= null)
@@ -82,7 +90,7 @@
 
 		//i4.putExtra("Value-Hotel-City-Code",current.getCityCode());
 	*/
-	    
+
 	     data=new ArrayList<ModelRowCountRoom>();
 	   // for(int i=0;i<2;i++){
 	    ModelRowCountRoom model=new ModelRowCountRoom();
@@ -161,17 +169,22 @@
 		  // editTextView.setText("");
 		   break;
 		case R.id.searchHotel:
-			Intent intent6=new Intent(getActivity(),SelectHotelActivity.class);
-			Bundle bundle6 = getActivity().getIntent().getExtras();
-      		if(bundle6 != null ){
-      			intent6.putExtra("Value-Maghsad-City",  bundle6.getString("Value-Maghsad-City"));
-				intent6.putExtra("Value-Maghsad-Airport", bundle6.getString("Value-Maghsad-Airport"));
-				intent6.putExtra("Value-Maghsad-Airport-Code", bundle6.getString("Value-Maghsad-Airport-Code"));//*
-      		}
+			Intent intent=new Intent(getActivity(),SelectHotelActivity.class);
+
+			intent.putExtra("CheckIn",datePickerDialogRaft.getDate() );
+			intent.putExtra("CheckOut",datePickerDialogBargasht.getDate());
+
 			
-            startActivityForResult(intent6, 2);
-		break;
-		
+            startActivity(intent);
+		break;
+			case R.id.tvRaft:
+				datePickerDialogRaft =new DatePickerDialog(getActivity(),tvRaft,"تاریخ رفت");
+				break;
+			case R.id.tvBargasht:
+				datePickerDialogBargasht=new DatePickerDialog(getActivity(),tvBargasht,"تاریخ برگشت");
+
+				break;
+
 	
 		}
 	}
Index: app/src/main/res/layout/activity_search_hotel.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:swipe=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"#ffffff\"\n    android:orientation=\"vertical\"\n    android:id=\"@+id/rlRoot\">\n\n    <include\n        android:id=\"@+id/toolbarLayout\"\n        layout=\"@layout/toolbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:background=\"@color/colorPrimary\" />\n\n\n    <View\n        android:id=\"@+id/view\"\n        android:layout_below=\"@+id/toolbarLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"1dp\"\n        android:background=\"@drawable/shadow\"/>\n\n    <ListView\n        android:id=\"@+id/lvHoteResult\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:layout_below=\"@+id/toolbarLayout\"\n        android:divider=\"@null\"\n        android:dividerHeight=\"0dp\"/>\n\n\n    <include\n        layout=\"@layout/loading_layout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n       />\n\n\n</RelativeLayout>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_search_hotel.xml	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ app/src/main/res/layout/activity_search_hotel.xml	(revision )
@@ -35,6 +35,7 @@
         layout="@layout/loading_layout"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
+
        />
 
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n          </set>\n        </option>\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ .idea/gradle.xml	(revision )
@@ -9,6 +9,8 @@
           <set>
             <option value="$PROJECT_DIR$" />
             <option value="$PROJECT_DIR$/app" />
+            <option value="$PROJECT_DIR$/materialdatetimepicker" />
+            <option value="$PROJECT_DIR$/persianmaterialdatetimepicker" />
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
Index: app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianDateParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianDateParser.java	(revision )
+++ app/src/main/java/com/reserv/myapplicationeli/tools/persian/Calendar/persian/util/PersianDateParser.java	(revision )
@@ -0,0 +1,180 @@
+/**
+ * Persian Calendar see: http://code.google.com/p/persian-calendar/
+   Copyright (C) 2012  Mortezaadi@gmail.com
+   PersianDateParser.java
+   
+   Persian Calendar is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+package com.reserv.myapplicationeli.tools.persian.Calendar.persian.util;
+
+/**
+ * Parses text from the beginning of the given string to produce a
+ * PersianCalendar.
+ * 
+ * <p>
+ * See the {@link #getPersianDate()} method for more information on date
+ * parsing.
+ * 
+ * <pre>
+ *                Example
+ *                     
+ *  {@code
+ *    PersianCalendar pCal =
+ *     new PersianDateParser("1361/3/1").getPersianDate();             
+ *  }
+ * </pre>
+ * 
+ * @author Morteza contact: <a
+ *         href="mailto:Mortezaadi@gmail.com">Mortezaadi@gmail.com</a>
+ * @version 1.0
+ */
+public class PersianDateParser {
+
+	private String dateString;
+	private String delimiter = "/";
+
+	/**
+	 * <pre>
+	 * construct parser with date string assigned
+	 * the default delimiter is '/'.
+	 * 
+	 * To assign deferment delimiter use:
+	 * {@link #PersianDateParser(String dateString, String delimiter)}
+	 * 
+	 *                     Example
+	 *                     
+	 *  {@code
+	 *    PersianCalendar pCal =
+	 *     new PersianDateParser("1361/3/1").getPersianDate();             
+	 *  }
+	 * </pre>
+	 * 
+	 * @param dateString
+	 */
+	public PersianDateParser(String dateString) {
+		this.dateString = dateString;
+	}
+
+	/**
+	 * <pre>
+	 * construct parser with date string assigned
+	 * the default delimiter is '/'. with this constructor
+	 * you can set different delimiter to parse the date
+	 * based on this delimiter.
+	 * see also:
+	 * {@link #PersianDateParser(String dateString)}
+	 * 
+	 *                     Example
+	 *                     
+	 *  {@code
+	 *    PersianCalendar pCal =
+	 *     new PersianDateParser("1361-3-1","-").getPersianDate();             
+	 *  }
+	 * </pre>
+	 * 
+	 * @param dateString
+	 * @param delimiter
+	 */
+	public PersianDateParser(String dateString, String delimiter) {
+		this(dateString);
+		this.delimiter = delimiter;
+	}
+
+	/**
+	 * Produce the PersianCalendar object from given DateString throws Exception
+	 * if couldn't parse the text.
+	 * 
+	 * @return PersianCalendar object
+	 * @exception RuntimeException
+	 */
+	public PersianCalendar getPersianDate() {
+
+		checkDateStringInitialValidation();
+
+		String tokens[] = splitDateString(normalizeDateString(dateString));
+		int year = Integer.parseInt(tokens[0]);
+		int month = Integer.parseInt(tokens[1]);
+		int day = Integer.parseInt(tokens[2]);
+
+		checkPersianDateValidation(year, month, day);
+
+		PersianCalendar pCal = new PersianCalendar();
+		pCal.setPersianDate(year, month, day);
+
+		return pCal;
+	}
+
+	/**
+	 * validate the given date
+	 * 
+	 * @param year
+	 * @param month
+	 * @param day
+	 */
+	private void checkPersianDateValidation(int year, int month, int day) {
+		if (year < 1)
+			throw new RuntimeException("year is not valid");
+		if (month < 1 || month > 12)
+			throw new RuntimeException("month is not valid");
+		if (day < 1 || day > 31)
+			throw new RuntimeException("day is not valid");
+		if (month > 6 && day == 31)
+			throw new RuntimeException("day is not valid");
+		if (month == 12 && day == 30 && !PersianCalendarUtils.isPersianLeapYear(year))
+			throw new RuntimeException("day is not valid " + year + " is not a leap year");
+	}
+
+	/**
+	 * planned for further calculation before parsing the text
+	 * 
+	 * @param dateString
+	 * @return
+	 */
+	private String normalizeDateString(String dateString) {
+		// dateString = dateString.replace("-", delimiter);
+		return dateString;
+	}
+
+	private String[] splitDateString(String dateString) {
+		String tokens[] = dateString.split(delimiter);
+		if (tokens.length != 3)
+			throw new RuntimeException("wrong date:" + dateString + " is not a Persian Date or can not be parsed");
+		return tokens;
+	}
+
+	private void checkDateStringInitialValidation() {
+		if (dateString == null)
+			throw new RuntimeException("input didn't assing please use setDateString()");
+		// if(dateString.length()>10)
+		// throw new RuntimeException("wrong date:" + dateString +
+		// " is not a Persian Date or can not be parsed" );
+	}
+
+	public String getDateString() {
+		return dateString;
+	}
+
+	public void setDateString(String dateString) {
+		this.dateString = dateString;
+	}
+
+	public String getDelimiter() {
+		return delimiter;
+	}
+
+	public void setDelimiter(String delimiter) {
+		this.delimiter = delimiter;
+	}
+
+}
Index: app/src/main/res/values/attrs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <attr name=\"textFieldStyle\" format=\"reference\"/>\n    <attr name=\"fontPathCalligraphyConfig\" format=\"string\"/>\n\n</resources>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/attrs.xml	(revision 1f14a0b47a2a26c3365e0c29e565e54b6ad424b4)
+++ app/src/main/res/values/attrs.xml	(revision )
@@ -3,4 +3,16 @@
     <attr name="textFieldStyle" format="reference"/>
     <attr name="fontPathCalligraphyConfig" format="string"/>
 
+    <declare-styleable name="PersianDatePicker">
+        <attr name="minYear" format="integer" />
+        <attr name="maxYear" format="integer" />
+        <attr name="selectedYear" format="integer" />
+        <attr name="selectedMonth" format="integer" />
+        <attr name="selectedDay" format="integer" />
+        <attr name="displayMonthNames" format="boolean" />
+        <attr name="yearRange" format="integer" />
+        <attr name="displayDescription" format="boolean" />
+        <attr name="disableSoftKeyboard" format="boolean" />
+    </declare-styleable>
+
 </resources>
